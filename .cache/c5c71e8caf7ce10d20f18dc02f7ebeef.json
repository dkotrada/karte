{"dependencies":[{"name":"../document/compile","loc":{"line":3,"column":24}},{"name":"../../utils","loc":{"line":4,"column":20}}],"generated":{"js":"'use strict';\n\nvar defineKey = require('../document/compile').defineKey;\nvar utils = require('../../utils');\n\nvar CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true\n};\n\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n\n  if (model.base && model.base.options.applyPluginsToDiscriminators) {\n    model.base._applyPlugins(schema);\n  }\n\n  if (model.schema.discriminatorMapping &&\n      !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name +\n        '\" can only be a discriminator of the root model');\n  }\n\n  var key = model.schema.options.discriminatorKey;\n\n  var baseSchemaAddition = {};\n  baseSchemaAddition[key] = {\n    default: void 0,\n    select: true,\n    set: function(newName) {\n      if (newName === name) {\n        return name;\n      }\n      throw new Error('Can\\'t set discriminator key \"' + key + '\", \"' +\n        name + '\" !== \"' + newName + '\"');\n    },\n    $skipDiscriminatorCheck: true\n  };\n  baseSchemaAddition[key][model.schema.options.typeKey] = String;\n  model.schema.add(baseSchemaAddition);\n  defineKey(key, null, model.prototype, null, [key], model.schema.options);\n\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\n    throw new Error('Discriminator \"' + name +\n        '\" cannot have field with name \"' + key + '\"');\n  }\n\n  function merge(schema, baseSchema) {\n    if (baseSchema.paths._id &&\n        baseSchema.paths._id.options &&\n        !baseSchema.paths._id.options.auto) {\n      var originalSchema = schema;\n      utils.merge(schema, originalSchema, { retainKeyOrder: true });\n      delete schema.paths._id;\n      delete schema.tree._id;\n    }\n    utils.merge(schema, baseSchema, { retainKeyOrder: true });\n\n    var obj = {};\n    obj[key] = {\n      default: name,\n      select: true,\n      set: function(newName) {\n        if (newName === name) {\n          return name;\n        }\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      },\n      $skipDiscriminatorCheck: true\n    };\n    obj[key][schema.options.typeKey] = String;\n    schema.add(obj);\n    schema.discriminatorMapping = {key: key, value: name, isRoot: false};\n\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n\n    var toJSON = schema.options.toJSON;\n    var toObject = schema.options.toObject;\n    var _id = schema.options._id;\n    var id = schema.options.id;\n\n    var keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n\n    for (var i = 0; i < keys.length; ++i) {\n      var _key = keys[i];\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key +\n              ' (can only modify ' +\n              Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +\n              ')');\n        }\n      }\n    }\n\n    schema.options = utils.clone(baseSchema.options);\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n    schema.options.id = id;\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n\n    schema.plugins = Array.prototype.slice(baseSchema.plugins);\n    schema.callQueue = baseSchema.callQueue.\n      concat(schema.callQueue.slice(schema._defaultMiddleware.length));\n    schema._requiredpaths = undefined; // reset just in case Schema#requiredPaths() was called on either schema\n  }\n\n  // merges base schema into new discriminator schema and sets new type field.\n  merge(schema, model.schema);\n\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = {key: key, value: null, isRoot: true};\n  }\n\n  if (model.discriminators[name]) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n\n  return schema;\n};\n"},"hash":"51da46346eaa5cd74ca4669b6b796180"}