{"dependencies":[{"name":"events","loc":{"line":1,"column":27}},{"name":"util","loc":{"line":2,"column":21}},{"name":"./aggregation_cursor","loc":{"line":298,"column":12}},{"name":"./command_cursor","loc":{"line":297,"column":12}},{"name":"./bulk/ordered","loc":{"line":250,"column":12}},{"name":"./bulk/unordered","loc":{"line":251,"column":12}},{"name":"./gridfs/grid_store","loc":{"line":9,"column":22}},{"name":"./cursor","loc":{"line":296,"column":12}},{"name":"./collection","loc":{"line":11,"column":23}},{"name":"./db","loc":{"line":12,"column":15}}],"generated":{"js":"var EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits;\n\n// Get prototypes\nvar AggregationCursor = require('./aggregation_cursor'),\n  CommandCursor = require('./command_cursor'),\n  OrderedBulkOperation = require('./bulk/ordered').OrderedBulkOperation,\n  UnorderedBulkOperation = require('./bulk/unordered').UnorderedBulkOperation,\n  GridStore = require('./gridfs/grid_store'),\n  Cursor = require('./cursor'),\n  Collection = require('./collection'),\n  Db = require('./db');\n\nvar basicOperationIdGenerator = {\n  operationId: 1,\n\n  next: function() {\n    return this.operationId++;\n  }\n}\n\nvar basicTimestampGenerator = {\n  current: function() {\n    return new Date().getTime();\n  },\n\n  duration: function(start, end) {\n    return end - start;\n  }\n}\n\nvar senstiveCommands = ['authenticate', 'saslStart', 'saslContinue', 'getnonce',\n  'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb'];\n\nvar Instrumentation = function(core, options, callback) {\n  options = options || {};\n\n  // Optional id generators\n  var operationIdGenerator = options.operationIdGenerator || basicOperationIdGenerator;\n  // Optional timestamp generator\n  var timestampGenerator = options.timestampGenerator || basicTimestampGenerator;\n  // Extend with event emitter functionality\n  EventEmitter.call(this);\n\n  // Contains all the instrumentation overloads\n  this.overloads = [];\n\n  // ---------------------------------------------------------\n  //\n  // Instrument prototype\n  //\n  // ---------------------------------------------------------\n\n  var instrumentPrototype = function(callback) {\n    var instrumentations = []\n\n    // Classes to support\n    var classes = [GridStore, OrderedBulkOperation, UnorderedBulkOperation,\n      CommandCursor, AggregationCursor, Cursor, Collection, Db];\n\n    // Add instrumentations to the available list\n    for(var i = 0; i < classes.length; i++) {\n      if(classes[i].define) {\n        instrumentations.push(classes[i].define.generate());\n      }\n    }\n\n    // Return the list of instrumentation points\n    callback(null, instrumentations);\n  }\n\n  // Did the user want to instrument the prototype\n  if(typeof callback == 'function') {\n    instrumentPrototype(callback);\n  }\n\n  // ---------------------------------------------------------\n  //\n  // Server\n  //\n  // ---------------------------------------------------------\n\n  // Reference\n  var self = this;\n  // Names of methods we need to wrap\n  var methods = ['command', 'insert', 'update', 'remove'];\n  // Prototype\n  var proto = core.Server.prototype;\n  // Core server method we are going to wrap\n  methods.forEach(function(x) {\n    var func = proto[x];\n\n    // Add to overloaded methods\n    self.overloads.push({proto: proto, name:x, func:func});\n\n    // The actual prototype\n    proto[x] = function() {\n      var requestId = core.Query.nextRequestId();\n      // Get the arguments\n      var args = Array.prototype.slice.call(arguments, 0);\n      var ns = args[0];\n      var commandObj = args[1];\n      var options = args[2] || {};\n      var keys = Object.keys(commandObj);\n      var commandName = keys[0];\n      var db = ns.split('.')[0];\n\n      // Get the collection\n      var col = ns.split('.');\n      col.shift();\n      col = col.join('.');\n\n      // Do we have a legacy insert/update/remove command\n      if(x == 'insert') { //} && !this.lastIsMaster().maxWireVersion) {\n        commandName = 'insert';\n\n        // Re-write the command\n        commandObj = {\n          insert: col, documents: commandObj\n        }\n\n        if(options.writeConcern && Object.keys(options.writeConcern).length > 0)  {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered != undefined ? options.ordered : true;\n      } else if(x == 'update') { // && !this.lastIsMaster().maxWireVersion) {\n        commandName = 'update';\n\n        // Re-write the command\n        commandObj = {\n          update: col, updates: commandObj\n        }\n\n        if(options.writeConcern && Object.keys(options.writeConcern).length > 0) {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered != undefined ? options.ordered : true;\n      } else if(x == 'remove') { //&& !this.lastIsMaster().maxWireVersion) {\n        commandName = 'delete';\n\n        // Re-write the command\n        commandObj = {\n          delete: col, deletes: commandObj\n        }\n\n        if(options.writeConcern && Object.keys(options.writeConcern).length > 0) {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered != undefined ? options.ordered : true;\n      }\n\n      // Get the callback\n      var callback = args.pop();\n      // Set current callback operation id from the current context or create\n      // a new one\n      var ourOpId = callback.operationId || operationIdGenerator.next();\n\n      // Get a connection reference for this server instance\n      var connection = this.s.pool.get()\n\n      // Emit the start event for the command\n      var command = {\n        // Returns the command.\n        command: commandObj,\n        // Returns the database name.\n        databaseName: db,\n        // Returns the command name.\n        commandName: commandName,\n        // Returns the driver generated request id.\n        requestId: requestId,\n        // Returns the driver generated operation id.\n        // This is used to link events together such as bulk write operations. OPTIONAL.\n        operationId: ourOpId,\n        // Returns the connection id for the command. For languages that do not have this,\n        // this MUST return the driver equivalent which MUST include the server address and port.\n        // The name of this field is flexible to match the object that is returned from the driver.\n        connectionId: connection\n      };\n\n      // Filter out any sensitive commands\n      if(senstiveCommands.indexOf(commandName.toLowerCase()) != -1) {\n        command.commandObj = {};\n        command.commandObj[commandName] = true;\n      }\n\n      // Emit the started event\n      self.emit('started', command)\n\n      // Start time\n      var startTime = timestampGenerator.current();\n\n      // Push our handler callback\n      args.push(function(err, r) {\n        var endTime = timestampGenerator.current();\n        var command = {\n          duration: timestampGenerator.duration(startTime, endTime),\n          commandName: commandName,\n          requestId: requestId,\n          operationId: ourOpId,\n          connectionId: connection\n        };\n\n        // If we have an error\n        if(err || (r && r.result && r.result.ok == 0)) {\n          command.failure = err || r.result.writeErrors || r.result;\n\n          // Filter out any sensitive commands\n          if(senstiveCommands.indexOf(commandName.toLowerCase()) != -1) {\n            command.failure = {};\n          }\n\n          self.emit('failed', command);\n        } else if(commandObj && commandObj.writeConcern\n          && commandObj.writeConcern.w == 0) {\n          // If we have write concern 0\n          command.reply = {ok:1};\n          self.emit('succeeded', command);\n        } else {\n          command.reply = r && r.result ? r.result : r;\n\n          // Filter out any sensitive commands\n          if(senstiveCommands.indexOf(commandName.toLowerCase()) != -1) {\n            command.reply = {};\n          }\n\n          self.emit('succeeded', command);\n        }\n\n        // Return to caller\n        callback(err, r);\n      });\n\n      // Apply the call\n      func.apply(this, args);\n    }\n  });\n\n  // ---------------------------------------------------------\n  //\n  // Bulk Operations\n  //\n  // ---------------------------------------------------------\n\n  // Inject ourselves into the Bulk methods\n  methods = ['execute'];\n  var prototypes = [\n    require('./bulk/ordered').Bulk.prototype,\n    require('./bulk/unordered').Bulk.prototype\n  ]\n\n  prototypes.forEach(function(proto) {\n    // Core server method we are going to wrap\n    methods.forEach(function(x) {\n      var func = proto[x];\n\n      // Add to overloaded methods\n      self.overloads.push({proto: proto, name:x, func:func});\n\n      // The actual prototype\n      proto[x] = function() {\n        // Get the arguments\n        var args = Array.prototype.slice.call(arguments, 0);\n        // Set an operation Id on the bulk object\n        this.operationId = operationIdGenerator.next();\n\n        // Get the callback\n        var callback = args.pop();\n        // If we have a callback use this\n        if(typeof callback == 'function') {\n          args.push(function(err, r) {\n            // Return to caller\n            callback(err, r);\n          });\n\n          // Apply the call\n          func.apply(this, args);\n        } else {\n          return func.apply(this, args);\n        }\n      }\n    });\n  });\n\n  // ---------------------------------------------------------\n  //\n  // Cursor\n  //\n  // ---------------------------------------------------------\n\n  // Inject ourselves into the Cursor methods\n  methods = ['_find', '_getmore', '_killcursor'];\n  prototypes = [\n    require('./cursor').prototype,\n    require('./command_cursor').prototype,\n    require('./aggregation_cursor').prototype\n  ]\n\n  // Command name translation\n  var commandTranslation = {\n    '_find': 'find', '_getmore': 'getMore', '_killcursor': 'killCursors', '_explain': 'explain'\n  }\n\n  prototypes.forEach(function(proto) {\n\n    // Core server method we are going to wrap\n    methods.forEach(function(x) {\n      var func = proto[x];\n\n      // Add to overloaded methods\n      self.overloads.push({proto: proto, name:x, func:func});\n\n      // The actual prototype\n      proto[x] = function() {\n        var cursor = this;\n        var requestId = core.Query.nextRequestId();\n        var ourOpId = operationIdGenerator.next();\n        var parts = this.ns.split('.');\n        var db = parts[0];\n\n        // Get the collection\n        parts.shift();\n        var collection = parts.join('.');\n\n        // Set the command\n        var command = this.query;\n        var cmd = this.s.cmd;\n\n        // If we have a find method, set the operationId on the cursor\n        if(x == '_find') {\n          cursor.operationId = ourOpId;\n        }\n\n        // Do we have a find command rewrite it\n        if(x == '_getmore') {\n          command = {\n            getMore: this.cursorState.cursorId,\n            collection: collection,\n            batchSize: cmd.batchSize\n          }\n\n          if(cmd.maxTimeMS) command.maxTimeMS = cmd.maxTimeMS;\n        } else if(x == '_killcursor') {\n          command = {\n            killCursors: collection,\n            cursors: [this.cursorState.cursorId]\n          }\n        } else if(cmd.find) {\n          command = {\n            find: collection, filter: cmd.query\n          }\n\n          if(cmd.sort) command.sort = cmd.sort;\n          if(cmd.fields) command.projection = cmd.fields;\n          if(cmd.limit && cmd.limit < 0) {\n            command.limit = Math.abs(cmd.limit);\n            command.singleBatch = true;\n          } else if(cmd.limit) {\n            command.limit = Math.abs(cmd.limit);\n          }\n\n          // Options\n          if(cmd.skip) command.skip = cmd.skip;\n          if(cmd.hint) command.hint = cmd.hint;\n          if(cmd.batchSize) command.batchSize = cmd.batchSize;\n          if(typeof cmd.returnKey == 'boolean') command.returnKey = cmd.returnKey;\n          if(cmd.comment) command.comment = cmd.comment;\n          if(cmd.min) command.min = cmd.min;\n          if(cmd.max) command.max = cmd.max;\n          if(cmd.maxScan) command.maxScan = cmd.maxScan;\n          if(cmd.maxTimeMS) command.maxTimeMS = cmd.maxTimeMS;\n\n          // Flags\n          if(typeof cmd.awaitData == 'boolean') command.awaitData = cmd.awaitData;\n          if(typeof cmd.snapshot == 'boolean') command.snapshot = cmd.snapshot;\n          if(typeof cmd.tailable == 'boolean') command.tailable = cmd.tailable;\n          if(typeof cmd.oplogReplay == 'boolean') command.oplogReplay = cmd.oplogReplay;\n          if(typeof cmd.noCursorTimeout == 'boolean') command.noCursorTimeout = cmd.noCursorTimeout;\n          if(typeof cmd.partial == 'boolean') command.partial = cmd.partial;\n          if(typeof cmd.showDiskLoc == 'boolean') command.showRecordId = cmd.showDiskLoc;\n\n          // Read Concern\n          if(cmd.readConcern) command.readConcern = cmd.readConcern;\n\n          // Override method\n          if(cmd.explain) command.explain = cmd.explain;\n          if(cmd.exhaust) command.exhaust = cmd.exhaust;\n\n          // If we have a explain flag\n          if(cmd.explain) {\n            // Create fake explain command\n            command = {\n              explain: command,\n              verbosity: 'allPlansExecution'\n            }\n\n            // Set readConcern on the command if available\n            if(cmd.readConcern) command.readConcern = cmd.readConcern\n\n            // Set up the _explain name for the command\n            x = '_explain';\n          }\n        } else {\n          command = cmd;\n        }\n\n        // Set up the connection\n        var connectionId = null;\n\n        // Set local connection\n        if(this.connection) connectionId = this.connection;\n        if(!connectionId && this.server && this.server.getConnection) connectionId = this.server.getConnection();\n\n        // Get the command Name\n        var commandName = x == '_find' ? Object.keys(command)[0] : commandTranslation[x];\n\n        // Emit the start event for the command\n        command = {\n          // Returns the command.\n          command: command,\n          // Returns the database name.\n          databaseName: db,\n          // Returns the command name.\n          commandName: commandName,\n          // Returns the driver generated request id.\n          requestId: requestId,\n          // Returns the driver generated operation id.\n          // This is used to link events together such as bulk write operations. OPTIONAL.\n          operationId: this.operationId,\n          // Returns the connection id for the command. For languages that do not have this,\n          // this MUST return the driver equivalent which MUST include the server address and port.\n          // The name of this field is flexible to match the object that is returned from the driver.\n          connectionId: connectionId\n        };\n\n        // Get the arguments\n        var args = Array.prototype.slice.call(arguments, 0);\n\n        // Get the callback\n        var callback = args.pop();\n\n        // We do not have a callback but a Promise\n        if(typeof callback == 'function' || command.commandName == 'killCursors') {\n          var startTime = timestampGenerator.current();\n          // Emit the started event\n          self.emit('started', command)\n\n          // Emit succeeded event with killcursor if we have a legacy protocol\n          if(command.commandName == 'killCursors'\n            && this.server.lastIsMaster()\n            && this.server.lastIsMaster().maxWireVersion < 4) {\n            // Emit the succeeded command\n            command = {\n              duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n              commandName: commandName,\n              requestId: requestId,\n              operationId: cursor.operationId,\n              connectionId: cursor.server.getConnection(),\n              reply: [{ok:1}]\n            };\n\n            // Apply callback to the list of args\n            args.push(callback);\n            // Apply the call\n            func.apply(this, args);\n            // Emit the command\n            return self.emit('succeeded', command)\n          }\n\n          // Add our callback handler\n          args.push(function(err, r) {\n            if(err) {\n              // Command\n              var command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: ourOpId,\n                connectionId: cursor.server.getConnection(),\n                failure: err };\n\n              // Emit the command\n              self.emit('failed', command)\n            } else {\n              // Do we have a getMore\n              if(commandName.toLowerCase() == 'getmore' && r == null) {\n                r = {\n                  cursor: {\n                    id: cursor.cursorState.cursorId,\n                    ns: cursor.ns,\n                    nextBatch: cursor.cursorState.documents\n                  }, ok:1\n                }\n              } else if((commandName.toLowerCase() == 'find'\n                || commandName.toLowerCase() == 'aggregate'\n                || commandName.toLowerCase() == 'listcollections') && r == null) {\n                r = {\n                  cursor: {\n                    id: cursor.cursorState.cursorId,\n                    ns: cursor.ns,\n                    firstBatch: cursor.cursorState.documents\n                  }, ok:1\n                }\n              } else if(commandName.toLowerCase() == 'killcursors' && r == null) {\n                r = {\n                  cursorsUnknown:[cursor.cursorState.lastCursorId],\n                  ok:1\n                }\n              }\n\n              // cursor id is zero, we can issue success command\n              command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: cursor.operationId,\n                connectionId: cursor.server.getConnection(),\n                reply: r && r.result ? r.result : r\n              };\n\n              // Emit the command\n              self.emit('succeeded', command)\n            }\n\n            // Return\n            if(!callback) return;\n\n            // Return to caller\n            callback(err, r);\n          });\n\n          // Apply the call\n          func.apply(this, args);\n        } else {\n          // Assume promise, push back the missing value\n          args.push(callback);\n          // Get the promise\n          var promise = func.apply(this, args);\n          // Return a new promise\n          return new cursor.s.promiseLibrary(function(resolve, reject) {\n            var startTime = timestampGenerator.current();\n            // Emit the started event\n            self.emit('started', command)\n            // Execute the function\n            promise.then(function() {\n              // cursor id is zero, we can issue success command\n              var command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: cursor.operationId,\n                connectionId: cursor.server.getConnection(),\n                reply: cursor.cursorState.documents\n              };\n\n              // Emit the command\n              self.emit('succeeded', command)\n            }).catch(function(err) {\n              // Command\n              var command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: ourOpId,\n                connectionId: cursor.server.getConnection(),\n                failure: err };\n\n              // Emit the command\n              self.emit('failed', command)\n              // reject the promise\n              reject(err);\n            });\n          });\n        }\n      }\n    });\n  });\n}\n\ninherits(Instrumentation, EventEmitter);\n\nInstrumentation.prototype.uninstrument = function() {\n  for(var i = 0; i < this.overloads.length; i++) {\n    var obj = this.overloads[i];\n    obj.proto[obj.name] = obj.func;\n  }\n\n  // Remove all listeners\n  this.removeAllListeners('started');\n  this.removeAllListeners('succeeded');\n  this.removeAllListeners('failed');\n}\n\nmodule.exports = Instrumentation;\n"},"hash":"a38ed1a2ff1ed9e9fcffdd91eb99cd5d"}