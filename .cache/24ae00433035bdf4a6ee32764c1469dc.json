{"dependencies":[{"name":"../connection/utils","loc":{"line":3,"column":27}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\"use strict\";\n\nvar retrieveBSON = require('../connection/utils').retrieveBSON;\nvar BSON = retrieveBSON();\nvar Long = BSON.Long;\n\n// Incrementing request id\nvar _requestId = 0;\n\n// Wire command operation ids\nvar OP_QUERY = 2004;\nvar OP_GETMORE = 2005;\nvar OP_KILL_CURSORS = 2007;\n\n// Query flags\nvar OPTS_TAILABLE_CURSOR = 2;\nvar OPTS_SLAVE = 4;\nvar OPTS_OPLOG_REPLAY = 8;\nvar OPTS_NO_CURSOR_TIMEOUT = 16;\nvar OPTS_AWAIT_DATA = 32;\nvar OPTS_EXHAUST = 64;\nvar OPTS_PARTIAL = 128;\n\n// Response flags\nvar CURSOR_NOT_FOUND = 0;\nvar QUERY_FAILURE = 2;\nvar SHARD_CONFIG_STALE = 4;\nvar AWAIT_CAPABLE = 8;\n\n/**************************************************************\n * QUERY\n **************************************************************/\nvar Query = function(bson, ns, query, options) {\n  var self = this;\n  // Basic options needed to be passed in\n  if(ns == null) throw new Error(\"ns must be specified for query\");\n  if(query == null) throw new Error(\"query must be specified for query\");\n\n  // Validate that we are not passing 0x00 in the collection name\n  if(!!~ns.indexOf(\"\\x00\")) {\n    throw new Error(\"namespace cannot contain a null character\");\n  }\n\n  // Basic options\n  this.bson = bson;\n  this.ns = ns;\n  this.query = query;\n\n  // Ensure empty options\n  this.options = options || {};\n\n  // Additional options\n  this.numberToSkip = options.numberToSkip || 0;\n  this.numberToReturn = options.numberToReturn || 0;\n  this.returnFieldSelector = options.returnFieldSelector || null;\n  this.requestId = Query.getRequestId();\n\n  // Serialization option\n  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n  this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : true;\n  this.batchSize = self.numberToReturn;\n\n  // Flags\n  this.tailable = false;\n  this.slaveOk = typeof options.slaveOk == 'boolean'? options.slaveOk : false;\n  this.oplogReplay = false;\n  this.noCursorTimeout = false;\n  this.awaitData = false;\n  this.exhaust = false;\n  this.partial = false;\n}\n\n//\n// Assign a new request Id\nQuery.prototype.incRequestId = function() {\n  this.requestId = _requestId++;\n}\n\n//\n// Assign a new request Id\nQuery.nextRequestId = function() {\n  return _requestId + 1;\n}\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nQuery.prototype.toBin = function() {\n  var self = this;\n  var buffers = [];\n  var projection = null;\n\n  // Set up the flags\n  var flags = 0;\n  if(this.tailable) {\n    flags |= OPTS_TAILABLE_CURSOR;\n  }\n\n  if(this.slaveOk) {\n    flags |= OPTS_SLAVE;\n  }\n\n  if(this.oplogReplay) {\n    flags |= OPTS_OPLOG_REPLAY;\n  }\n\n  if(this.noCursorTimeout) {\n    flags |= OPTS_NO_CURSOR_TIMEOUT;\n  }\n\n  if(this.awaitData) {\n    flags |= OPTS_AWAIT_DATA;\n  }\n\n  if(this.exhaust) {\n    flags |= OPTS_EXHAUST;\n  }\n\n  if(this.partial) {\n    flags |= OPTS_PARTIAL;\n  }\n\n  // If batchSize is different to self.numberToReturn\n  if(self.batchSize != self.numberToReturn) self.numberToReturn = self.batchSize;\n\n  // Allocate write protocol header buffer\n  var header = new Buffer(\n    4 * 4 // Header\n    + 4   // Flags\n    + Buffer.byteLength(self.ns) + 1 // namespace\n    + 4 // numberToSkip\n    + 4 // numberToReturn\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Serialize the query\n  var query = self.bson.serialize(this.query, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined,\n  });\n\n  // Add query document\n  buffers.push(query);\n\n  if(self.returnFieldSelector && Object.keys(self.returnFieldSelector).length > 0) {\n    // Serialize the projection document\n    projection = self.bson.serialize(this.returnFieldSelector, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined,\n    });\n    // Add projection document\n    buffers.push(projection);\n  }\n\n  // Total message size\n  var totalLength = header.length + query.length + (projection ? projection.length : 0);\n\n  // Set up the index\n  var index = 4;\n\n  // Write total document length\n  header[3] = (totalLength >> 24) & 0xff;\n  header[2] = (totalLength >> 16) & 0xff;\n  header[1] = (totalLength >> 8) & 0xff;\n  header[0] = (totalLength) & 0xff;\n\n  // Write header information requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // Write header information responseTo\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write header information OP_QUERY\n  header[index + 3] = (OP_QUERY >> 24) & 0xff;\n  header[index + 2] = (OP_QUERY >> 16) & 0xff;\n  header[index + 1] = (OP_QUERY >> 8) & 0xff;\n  header[index] = (OP_QUERY) & 0xff;\n  index = index + 4;\n\n  // Write header information flags\n  header[index + 3] = (flags >> 24) & 0xff;\n  header[index + 2] = (flags >> 16) & 0xff;\n  header[index + 1] = (flags >> 8) & 0xff;\n  header[index] = (flags) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Write header information flags numberToSkip\n  header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n  header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n  header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n  header[index] = (this.numberToSkip) & 0xff;\n  index = index + 4;\n\n  // Write header information flags numberToReturn\n  header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n  header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n  header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n  header[index] = (this.numberToReturn) & 0xff;\n  index = index + 4;\n\n  // Return the buffers\n  return buffers;\n}\n\nQuery.getRequestId = function() {\n  return ++_requestId;\n}\n\n/**************************************************************\n * GETMORE\n **************************************************************/\nvar GetMore = function(bson, ns, cursorId, opts) {\n  opts = opts || {};\n  this.numberToReturn = opts.numberToReturn || 0;\n  this.requestId = _requestId++;\n  this.bson = bson;\n  this.ns = ns;\n  this.cursorId = cursorId;\n}\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nGetMore.prototype.toBin = function() {\n  var length = 4 + Buffer.byteLength(this.ns) + 1 + 4 + 8 + (4 * 4);\n  // Create command buffer\n  var index = 0;\n  // Allocate buffer\n  var _buffer = new Buffer(length);\n\n  // Write header information\n  // index = write32bit(index, _buffer, length);\n  _buffer[index + 3] = (length >> 24) & 0xff;\n  _buffer[index + 2] = (length >> 16) & 0xff;\n  _buffer[index + 1] = (length >> 8) & 0xff;\n  _buffer[index] = (length) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, requestId);\n  _buffer[index + 3] = (this.requestId >> 24) & 0xff;\n  _buffer[index + 2] = (this.requestId >> 16) & 0xff;\n  _buffer[index + 1] = (this.requestId >> 8) & 0xff;\n  _buffer[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = (0) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, OP_GETMORE);\n  _buffer[index + 3] = (OP_GETMORE >> 24) & 0xff;\n  _buffer[index + 2] = (OP_GETMORE >> 16) & 0xff;\n  _buffer[index + 1] = (OP_GETMORE >> 8) & 0xff;\n  _buffer[index] = (OP_GETMORE) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + _buffer.write(this.ns, index, 'utf8') + 1;\n  _buffer[index - 1] = 0;\n\n  // Write batch size\n  // index = write32bit(index, _buffer, numberToReturn);\n  _buffer[index + 3] = (this.numberToReturn >> 24) & 0xff;\n  _buffer[index + 2] = (this.numberToReturn >> 16) & 0xff;\n  _buffer[index + 1] = (this.numberToReturn >> 8) & 0xff;\n  _buffer[index] = (this.numberToReturn) & 0xff;\n  index = index + 4;\n\n  // Write cursor id\n  // index = write32bit(index, _buffer, cursorId.getLowBits());\n  _buffer[index + 3] = (this.cursorId.getLowBits() >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorId.getLowBits() >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorId.getLowBits() >> 8) & 0xff;\n  _buffer[index] = (this.cursorId.getLowBits()) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, cursorId.getHighBits());\n  _buffer[index + 3] = (this.cursorId.getHighBits() >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorId.getHighBits() >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorId.getHighBits() >> 8) & 0xff;\n  _buffer[index] = (this.cursorId.getHighBits()) & 0xff;\n  index = index + 4;\n\n  // Return buffer\n  return _buffer;\n}\n\n/**************************************************************\n * KILLCURSOR\n **************************************************************/\nvar KillCursor = function(bson, cursorIds) {\n  this.requestId = _requestId++;\n  this.cursorIds = cursorIds;\n}\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nKillCursor.prototype.toBin = function() {\n  var length = 4 + 4 + (4 * 4) + (this.cursorIds.length * 8);\n\n  // Create command buffer\n  var index = 0;\n  var _buffer = new Buffer(length);\n\n  // Write header information\n  // index = write32bit(index, _buffer, length);\n  _buffer[index + 3] = (length >> 24) & 0xff;\n  _buffer[index + 2] = (length >> 16) & 0xff;\n  _buffer[index + 1] = (length >> 8) & 0xff;\n  _buffer[index] = (length) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, requestId);\n  _buffer[index + 3] = (this.requestId >> 24) & 0xff;\n  _buffer[index + 2] = (this.requestId >> 16) & 0xff;\n  _buffer[index + 1] = (this.requestId >> 8) & 0xff;\n  _buffer[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = (0) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, OP_KILL_CURSORS);\n  _buffer[index + 3] = (OP_KILL_CURSORS >> 24) & 0xff;\n  _buffer[index + 2] = (OP_KILL_CURSORS >> 16) & 0xff;\n  _buffer[index + 1] = (OP_KILL_CURSORS >> 8) & 0xff;\n  _buffer[index] = (OP_KILL_CURSORS) & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write batch size\n  // index = write32bit(index, _buffer, this.cursorIds.length);\n  _buffer[index + 3] = (this.cursorIds.length >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorIds.length >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorIds.length >> 8) & 0xff;\n  _buffer[index] = (this.cursorIds.length) & 0xff;\n  index = index + 4;\n\n  // Write all the cursor ids into the array\n  for(var i = 0; i < this.cursorIds.length; i++) {\n    // Write cursor id\n    // index = write32bit(index, _buffer, cursorIds[i].getLowBits());\n    _buffer[index + 3] = (this.cursorIds[i].getLowBits() >> 24) & 0xff;\n    _buffer[index + 2] = (this.cursorIds[i].getLowBits() >> 16) & 0xff;\n    _buffer[index + 1] = (this.cursorIds[i].getLowBits() >> 8) & 0xff;\n    _buffer[index] = (this.cursorIds[i].getLowBits()) & 0xff;\n    index = index + 4;\n\n    // index = write32bit(index, _buffer, cursorIds[i].getHighBits());\n    _buffer[index + 3] = (this.cursorIds[i].getHighBits() >> 24) & 0xff;\n    _buffer[index + 2] = (this.cursorIds[i].getHighBits() >> 16) & 0xff;\n    _buffer[index + 1] = (this.cursorIds[i].getHighBits() >> 8) & 0xff;\n    _buffer[index] = (this.cursorIds[i].getHighBits()) & 0xff;\n    index = index + 4;\n  }\n\n  // Return buffer\n  return _buffer;\n}\n\nvar Response = function(bson, data, opts) {\n  opts = opts || {promoteLongs: true, promoteValues: true, promoteBuffers: false};\n  this.parsed = false;\n\n  //\n  // Parse Header\n  //\n  this.index = 0;\n  this.raw = data;\n  this.data = data;\n  this.bson = bson;\n  this.opts = opts;\n\n  // Read the message length\n  this.length = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Fetch the request id for this reply\n  this.requestId = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Fetch the id of the request that triggered the response\n  this.responseTo = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Skip op-code field\n  this.index = this.index + 4;\n\n  // Unpack flags\n  this.responseFlags = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Unpack the cursor\n  var lowBits = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n  var highBits = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n  // Create long object\n  this.cursorId = new Long(lowBits, highBits);\n\n  // Unpack the starting from\n  this.startingFrom = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Unpack the number of objects returned\n  this.numberReturned = data[this.index] | data[this.index + 1] << 8 | data[this.index + 2] << 16 | data[this.index + 3] << 24;\n  this.index = this.index + 4;\n\n  // Preallocate document array\n  this.documents = new Array(this.numberReturned);\n\n  // Flag values\n  this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) != 0;\n  this.queryFailure = (this.responseFlags & QUERY_FAILURE) != 0;\n  this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) != 0;\n  this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) != 0;\n  this.promoteLongs = typeof opts.promoteLongs == 'boolean' ? opts.promoteLongs : true;\n  this.promoteValues = typeof opts.promoteValues == 'boolean' ? opts.promoteValues : true;\n  this.promoteBuffers = typeof opts.promoteBuffers == 'boolean' ? opts.promoteBuffers : false;\n}\n\nResponse.prototype.isParsed = function() {\n  return this.parsed;\n}\n\nResponse.prototype.parse = function(options) {\n  // Don't parse again if not needed\n  if(this.parsed) return;\n  options = options || {};\n\n  // Allow the return of raw documents instead of parsing\n  var raw = options.raw || false;\n  var documentsReturnedIn = options.documentsReturnedIn || null;\n  var promoteLongs = typeof options.promoteLongs == 'boolean'\n    ? options.promoteLongs\n    : this.opts.promoteLongs;\n  var promoteValues = typeof options.promoteValues == 'boolean'\n    ? options.promoteValues\n    : this.opts.promoteValues;\n  var promoteBuffers = typeof options.promoteBuffers == 'boolean'\n    ? options.promoteBuffers\n    : this.opts.promoteBuffers\n  var bsonSize, _options;\n\n  // Set up the options\n  _options = {\n    promoteLongs: promoteLongs,\n    promoteValues: promoteValues,\n    promoteBuffers: promoteBuffers\n  };\n\n  //\n  // Single document and documentsReturnedIn set\n  //\n  if(this.numberReturned == 1 && documentsReturnedIn != null && raw) {\n    // Calculate the bson size\n    bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;\n    // Slice out the buffer containing the command result document\n    var document = this.data.slice(this.index, this.index + bsonSize);\n    // Set up field we wish to keep as raw\n    var fieldsAsRaw = {}\n    fieldsAsRaw[documentsReturnedIn] = true;\n    _options.fieldsAsRaw = fieldsAsRaw;\n\n    // Deserialize but keep the array of documents in non-parsed form\n    var doc = this.bson.deserialize(document, _options);\n\n    // Get the documents\n    this.documents = doc.cursor[documentsReturnedIn];\n    this.numberReturned = this.documents.length;\n    // Ensure we have a Long valie cursor id\n    this.cursorId = typeof doc.cursor.id == 'number'\n      ? Long.fromNumber(doc.cursor.id)\n      : doc.cursor.id;\n\n    // Adjust the index\n    this.index = this.index + bsonSize;\n\n    // Set as parsed\n    this.parsed = true\n    return;\n  }\n\n  //\n  // Parse Body\n  //\n  for(var i = 0; i < this.numberReturned; i++) {\n    bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;\n\n    // If we have raw results specified slice the return document\n    if(raw) {\n      this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n    } else {\n      this.documents[i] = this.bson.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n    }\n\n    // Adjust the index\n    this.index = this.index + bsonSize;\n  }\n\n  // Set parsed\n  this.parsed = true;\n}\n\nmodule.exports = {\n    Query: Query\n  , GetMore: GetMore\n  , Response: Response\n  , KillCursor: KillCursor\n}\n"},"hash":"4e7c2ef407ae195d08c61d4881400c7a"}