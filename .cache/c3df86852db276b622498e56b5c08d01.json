{"dependencies":[{"name":"./commands","loc":{"line":5,"column":21}},{"name":"../connection/utils","loc":{"line":7,"column":27}},{"name":"../connection/commands","loc":{"line":10,"column":20}},{"name":"util","loc":{"line":11,"column":16}},{"name":"../connection/command_result","loc":{"line":12,"column":28}},{"name":"../error","loc":{"line":13,"column":25}},{"name":"./shared","loc":{"line":14,"column":32}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n\"use strict\";\n\nvar Insert = require('./commands').Insert\n  , Update = require('./commands').Update\n  , Remove = require('./commands').Remove\n  , copy = require('../connection/utils').copy\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , KillCursor = require('../connection/commands').KillCursor\n  , GetMore = require('../connection/commands').GetMore\n  , Query = require('../connection/commands').Query\n  , f = require('util').format\n  , CommandResult = require('../connection/command_result')\n  , MongoError = require('../error')\n  , getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\n// Write concern fields\nvar writeConcernFields = ['w', 'wtimeout', 'j', 'fsync'];\n\nvar WireProtocol = function() {}\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nWireProtocol.prototype.insert = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // If we have more than a 1000 ops fails\n  if(ops.length > 1000) return callback(new MongoError(\"exceeded maximum write batch size of 1000\"));\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('insert', Insert, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('insert', Insert, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.update = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('update', Update, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('update', Update, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.remove = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('remove', Remove, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('remove', Remove, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.killCursor = function(bson, ns, cursorId, pool, callback) {\n  // Create a kill cursor command\n  var killCursor = new KillCursor(bson, [cursorId]);\n  // Execute the kill cursor command\n  if(pool && pool.isConnected()) {\n    pool.write(killCursor, {\n      immediateRelease:true, noResponse: true\n    });\n  }\n\n  // Callback\n  if(typeof callback == 'function') callback(null, null);\n}\n\nWireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, options, callback) {\n  // Create getMore command\n  var getMore = new GetMore(bson, ns, cursorState.cursorId, {numberToReturn: batchSize});\n\n  // Query callback\n  var queryCallback = function(err, result) {\n    if(err) return callback(err);\n    // Get the raw message\n    var r = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      return callback(new MongoError(\"cursor does not exist, was killed or timed out\"), null);\n    }\n\n    // Ensure we have a Long valie cursor id\n    var cursorId = typeof r.cursorId == 'number'\n      ? Long.fromNumber(r.cursorId)\n      : r.cursorId;\n\n    // Set all the values\n    cursorState.documents = r.documents;\n    cursorState.cursorId = cursorId;\n\n    // Return\n    callback(null, null, r.connection);\n  }\n\n  // Contains any query options\n  var queryOptions = {};\n\n  // If we have a raw query decorate the function\n  if(raw) {\n    queryOptions.raw = raw;\n  }\n\n  // Check if we need to promote longs\n  if(typeof cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if(typeof cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if(typeof cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  }\n\n  // Write out the getMore command\n  connection.write(getMore, queryOptions, queryCallback);\n}\n\nWireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  // Establish type of command\n  if(cmd.find) {\n    return setupClassicFind(bson, ns, cmd, cursorState, topology, options)\n  } else if(cursorState.cursorId != null) {\n    return;\n  } else if(cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}\n\n//\n// Execute a find command\nvar setupClassicFind = function(bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  var numberToReturn = 0;\n\n  // Unpack the limit and batchSize values\n  if(cursorState.limit == 0) {\n    numberToReturn = cursorState.batchSize;\n  } else if(cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || (cursorState.limit > 0 && cursorState.batchSize == 0)) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  var numberToSkip = cursorState.skip || 0;\n  // Build actual find command\n  var findCmd = {};\n  // Using special modifier\n  var usesSpecialModifier = false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos' && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n    usesSpecialModifier = true;\n  }\n\n  // Add special modifiers to the query\n  if(cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;\n  if(cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;\n  if(cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;\n  if(cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;\n  if(cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;\n  if(cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;\n  if(cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;\n  if(cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;\n  if(cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;\n  if(cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;\n\n  if(cmd.explain) {\n\t// nToReturn must be 0 (match all) or negative (match N and close cursor)\n\t// nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    usesSpecialModifier = true;\n    findCmd['$explain'] = true;\n  }\n\n  // If we have a special modifier\n  if(usesSpecialModifier) {\n    findCmd['$query'] = cmd.query;\n  } else {\n    findCmd = cmd.query;\n  }\n\n  // Throw on majority readConcern passed in\n  if(cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server find command does not support a readConcern level of %s', cmd.readConcern.level));\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if(cmd.readConcern) {\n    cmd = copy(cmd);\n    delete cmd['readConcern'];\n  }\n\n  // Set up the serialize and ignoreUndefined fields\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // Build Query object\n  var query = new Query(bson, ns, findCmd, {\n      numberToSkip: numberToSkip, numberToReturn: numberToReturn\n    , checkKeys: false, returnFieldSelector: cmd.fields\n    , serializeFunctions: serializeFunctions, ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Set up the option bits for wire protocol\n  if(typeof cmd.tailable == 'boolean') query.tailable = cmd.tailable;\n  if(typeof cmd.oplogReplay == 'boolean') query.oplogReplay = cmd.oplogReplay;\n  if(typeof cmd.noCursorTimeout == 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;\n  if(typeof cmd.awaitData == 'boolean') query.awaitData = cmd.awaitData;\n  if(typeof cmd.partial == 'boolean') query.partial = cmd.partial;\n  // Return the query\n  return query;\n}\n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {}\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Final query\n  var finalCmd = {};\n  for(var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // Throw on majority readConcern passed in\n  if(cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server %s command does not support a readConcern level of %s', JSON.stringify(cmd), cmd.readConcern.level));\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if(cmd.readConcern) delete cmd['readConcern'];\n\n  // Serialize functions\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n\n  // Set up the serialize and ignoreUndefined fields\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos'\n    && readPreference\n    && readPreference.preference != 'primary') {\n    finalCmd = {\n      '$query': finalCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, serializeFunctions: serializeFunctions\n    , ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\nvar hasWriteConcern = function(writeConcern) {\n  if(writeConcern.w\n    || writeConcern.wtimeout\n    || writeConcern.j == true\n    || writeConcern.fsync == true\n    || Object.keys(writeConcern).length == 0) {\n    return true;\n  }\n  return false;\n}\n\nvar cloneWriteConcern = function(writeConcern) {\n  var wc = {};\n  if(writeConcern.w != null) wc.w = writeConcern.w;\n  if(writeConcern.wtimeout != null) wc.wtimeout = writeConcern.wtimeout;\n  if(writeConcern.j != null) wc.j = writeConcern.j;\n  if(writeConcern.fsync != null) wc.fsync = writeConcern.fsync;\n  return wc;\n}\n\n//\n// Aggregate up all the results\n//\nvar aggregateWriteOperationResults = function(opType, ops, results, connection) {\n  var finalResult = { ok: 1, n: 0 }\n  if(opType == 'update') {\n    finalResult.nModified = 0;\n  }\n\n  // Map all the results coming back\n  for(var i = 0; i < results.length; i++) {\n    var result = results[i];\n    var op = ops[i];\n\n    if((result.upserted || (result.updatedExisting == false)) && finalResult.upserted == null) {\n      finalResult.upserted = [];\n    }\n\n    // Push the upserted document to the list of upserted values\n    if(result.upserted) {\n      finalResult.upserted.push({index: i, _id: result.upserted});\n    }\n\n    // We have an upsert where we passed in a _id\n    if(result.updatedExisting == false && result.n == 1 && result.upserted == null) {\n      finalResult.upserted.push({index: i, _id: op.q._id});\n    } else if(result.updatedExisting == true) {\n      finalResult.nModified += result.n;\n    }\n\n    // We have an insert command\n    if(result.ok == 1 && opType == 'insert' && result.err == null) {\n      finalResult.n = finalResult.n + 1;\n    }\n\n    // We have a command error\n    if(result != null && result.ok == 0 || result.err || result.errmsg) {\n      if(result.ok == 0) finalResult.ok = 0;\n      finalResult.code = result.code;\n      finalResult.errmsg = result.errmsg || result.err || result.errMsg;\n\n      // Check if we have a write error\n      if(result.code == 11000\n        || result.code == 11001\n        || result.code == 12582\n        || result.code == 16544\n        || result.code == 16538\n        || result.code == 16542\n        || result.code == 14\n        || result.code == 13511) {\n        if(finalResult.writeErrors == null) finalResult.writeErrors = [];\n        finalResult.writeErrors.push({\n            index: i\n          , code: result.code\n          , errmsg: result.errmsg || result.err || result.errMsg\n        });\n      } else {\n        finalResult.writeConcernError = {\n            code: result.code\n          , errmsg: result.errmsg || result.err || result.errMsg\n        }\n      }\n    } else if(typeof result.n == 'number') {\n      finalResult.n += result.n;\n    } else {\n      finalResult.n += 1;\n    }\n\n    // Result as expected\n    if(result != null && result.lastOp) finalResult.lastOp = result.lastOp;\n  }\n\n  // Return finalResult aggregated results\n  return new CommandResult(finalResult, connection);\n}\n\n//\n// Execute all inserts in an ordered manner\n//\nvar executeOrdered = function(opType ,command, ismaster, ns, bson, pool, ops, options, callback) {\n  var _ops = ops.slice(0);\n  // Collect all the getLastErrors\n  var getLastErrors = [];\n  // Execute an operation\n  var executeOp = function(list, _callback) {\n    // No more items in the list\n    if(list.length == 0) {\n      return process.nextTick(function() {\n        _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      });\n    }\n\n    // Get the first operation\n    var doc = list.shift();\n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [doc], options);\n    // Write concern\n    var optionWriteConcern = options.writeConcern || {w:1};\n    // Final write concern\n    var writeConcern = cloneWriteConcern(optionWriteConcern);\n\n    // Get the db name\n    var db = ns.split('.').shift();\n\n    try {\n      // Add binary message to list of commands to execute\n      var commands = [op];\n\n      // Add getLastOrdered\n      var getLastErrorCmd = {getlasterror: 1};\n      // Merge all the fields\n      for(var i = 0; i < writeConcernFields.length; i++) {\n        if(writeConcern[writeConcernFields[i]] != null) {\n          getLastErrorCmd[writeConcernFields[i]] = writeConcern[writeConcernFields[i]];\n        }\n      }\n\n      // Create a getLastError command\n      var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {numberToReturn: -1});\n      // Add getLastError command to list of ops to execute\n      commands.push(getLastErrorOp);\n\n      // getLastError callback\n      var getLastErrorCallback = function(err, result) {\n        if(err) return callback(err);\n        // Get the document\n        var doc = result.result;\n        // Save the getLastError document\n        getLastErrors.push(doc);\n\n        // If we have an error terminate\n        if(doc.ok == 0 || doc.err || doc.errmsg) {\n          return callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, result.connection));\n        }\n\n        // Execute the next op in the list\n        executeOp(list, callback);\n      }\n\n      // Write both commands out at the same time\n      pool.write(commands, getLastErrorCallback);\n    } catch(err) {\n      // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n      getLastErrors.push({ ok: 1, errmsg: typeof err == 'string' ? err : err.message, code: 14 });\n      // Return due to an error\n      process.nextTick(function() {\n        _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      });\n    }\n  }\n\n  // Execute the operations\n  executeOp(_ops, callback);\n}\n\nvar executeUnordered = function(opType, command, ismaster, ns, bson, pool, ops, options, callback) {\n  // Total operations to write\n  var totalOps = ops.length;\n  // Collect all the getLastErrors\n  var getLastErrors = [];\n  // Write concern\n  var optionWriteConcern = options.writeConcern || {w:1};\n  // Final write concern\n  var writeConcern = cloneWriteConcern(optionWriteConcern);\n  // Driver level error\n  var error;\n\n  // Execute all the operations\n  for(var i = 0; i < ops.length; i++) {\n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [ops[i]], options);\n    // Get db name\n    var db = ns.split('.').shift();\n\n    try {\n      // Add binary message to list of commands to execute\n      var commands = [op];\n\n      // If write concern 0 don't fire getLastError\n      if(hasWriteConcern(writeConcern)) {\n        var getLastErrorCmd = {getlasterror: 1};\n        // Merge all the fields\n        for(var j = 0; j < writeConcernFields.length; j++) {\n          if(writeConcern[writeConcernFields[j]] != null)\n            getLastErrorCmd[writeConcernFields[j]] = writeConcern[writeConcernFields[j]];\n        }\n\n        // Create a getLastError command\n        var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {numberToReturn: -1});\n        // Add getLastError command to list of ops to execute\n        commands.push(getLastErrorOp);\n\n        // Give the result from getLastError the right index\n        var callbackOp = function(_index) {\n          return function(err, result) {\n            if(err) error = err;\n            // Update the number of operations executed\n            totalOps = totalOps - 1;\n            // Save the getLastError document\n            if(!err) getLastErrors[_index] = result.result;\n            // Check if we are done\n            if(totalOps == 0) {\n              process.nextTick(function() {\n                if(error) return callback(error);\n                callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, result.connection));\n              });\n            }\n          }\n        }\n\n        // Write both commands out at the same time\n        pool.write(commands, callbackOp(i));\n      } else {\n        pool.write(commands, {immediateRelease:true, noResponse:true});\n      }\n    } catch(err) {\n      // Update the number of operations executed\n      totalOps = totalOps - 1;\n      // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n      getLastErrors[i] = { ok: 1, errmsg: typeof err == 'string' ? err : err.message, code: 14 };\n      // Check if we are done\n      if(totalOps == 0) {\n        callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      }\n    }\n  }\n\n  // Empty w:0 return\n  if(writeConcern\n    && writeConcern.w == 0 && callback) {\n    callback(null, new CommandResult({ok:1}, null));\n  }\n}\n\nmodule.exports = WireProtocol;\n"},"hash":"f855438cab5fc2ab54e6ee5f559792f8"}