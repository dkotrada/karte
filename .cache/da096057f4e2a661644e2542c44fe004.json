{"dependencies":[{"name":"../float_parser","loc":{"line":4,"column":24}},{"name":"../long","loc":{"line":5,"column":17}},{"name":"../map","loc":{"line":6,"column":16}},{"name":"../double","loc":{"line":7,"column":19}},{"name":"../timestamp","loc":{"line":8,"column":22}},{"name":"../objectid","loc":{"line":9,"column":21}},{"name":"../symbol","loc":{"line":10,"column":19}},{"name":"../code","loc":{"line":11,"column":17}},{"name":"../regexp","loc":{"line":12,"column":23}},{"name":"../int_32","loc":{"line":13,"column":18}},{"name":"../min_key","loc":{"line":14,"column":19}},{"name":"../max_key","loc":{"line":15,"column":19}},{"name":"../decimal128","loc":{"line":16,"column":23}},{"name":"../db_ref","loc":{"line":17,"column":18}},{"name":"../binary","loc":{"line":18,"column":19}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\"use strict\"\n\nvar writeIEEE754 = require('../float_parser').writeIEEE754,\n  readIEEE754 = require('../float_parser').readIEEE754,\n  Long = require('../long').Long,\n  Map = require('../map'),\n  Double = require('../double').Double,\n  Timestamp = require('../timestamp').Timestamp,\n  ObjectID = require('../objectid').ObjectID,\n  Symbol = require('../symbol').Symbol,\n  Code = require('../code').Code,\n  BSONRegExp = require('../regexp').BSONRegExp,\n  Int32 = require('../int_32').Int32,\n  MinKey = require('../min_key').MinKey,\n  MaxKey = require('../max_key').MaxKey,\n  Decimal128 = require('../decimal128'),\n  DBRef = require('../db_ref').DBRef,\n  Binary = require('../binary').Binary;\n\ntry {\n  var _Buffer = Uint8Array;\n} catch(e) {\n  var _Buffer = Buffer;\n}\n\nvar regexp = /\\x00/\n\n// To ensure that 0.4 of node works correctly\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n}\n\nvar isRegExp = function isRegExp(d) {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n}\n\nvar serializeString = function(buffer, key, value, index, isArray) {\n  // Encode String type\n  buffer[index++] = BSON.BSON_DATA_STRING;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes + 1;\n  buffer[index - 1] = 0;\n  // Write the string\n  var size = buffer.write(value, index + 4, 'utf8');\n  // Write the size of the string to buffer\n  buffer[index + 3] = (size + 1 >> 24) & 0xff;\n  buffer[index + 2] = (size + 1 >> 16) & 0xff;\n  buffer[index + 1] = (size + 1 >> 8) & 0xff;\n  buffer[index] = size + 1 & 0xff;\n  // Update index\n  index = index + 4 + size;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nvar serializeNumber = function(buffer, key, value, index, isArray) {\n  // We have an integer value\n  if(Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n    // If the value fits in 32 bits encode as int, if it fits in a double\n    // encode it as a double, otherwise long\n    if(value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n      // Set int type 32 bits or less\n      buffer[index++] = BSON.BSON_DATA_INT;\n      // Number of written bytes\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write the int value\n      buffer[index++] = value & 0xff;\n      buffer[index++] = (value >> 8) & 0xff;\n      buffer[index++] = (value >> 16) & 0xff;\n      buffer[index++] = (value >> 24) & 0xff;\n    } else if(value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n      // Encode as double\n      buffer[index++] = BSON.BSON_DATA_NUMBER;\n      // Number of written bytes\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write float\n      writeIEEE754(buffer, value, index, 'little', 52, 8);\n      // Ajust index\n      index = index + 8;\n    } else {\n      // Set long type\n      buffer[index++] = BSON.BSON_DATA_LONG;\n      // Number of written bytes\n      var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      var longVal = Long.fromNumber(value);\n      var lowBits = longVal.getLowBits();\n      var highBits = longVal.getHighBits();\n      // Encode low bits\n      buffer[index++] = lowBits & 0xff;\n      buffer[index++] = (lowBits >> 8) & 0xff;\n      buffer[index++] = (lowBits >> 16) & 0xff;\n      buffer[index++] = (lowBits >> 24) & 0xff;\n      // Encode high bits\n      buffer[index++] = highBits & 0xff;\n      buffer[index++] = (highBits >> 8) & 0xff;\n      buffer[index++] = (highBits >> 16) & 0xff;\n      buffer[index++] = (highBits >> 24) & 0xff;\n    }\n  } else {\n    // Encode as double\n    buffer[index++] = BSON.BSON_DATA_NUMBER;\n    // Number of written bytes\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Write float\n    writeIEEE754(buffer, value, index, 'little', 52, 8);\n    // Ajust index\n    index = index + 8;\n  }\n\n  return index;\n}\n\nvar serializeNull = function(buffer, key, value, index, isArray) {\n  // Set long type\n  buffer[index++] = BSON.BSON_DATA_NULL;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\n\nvar serializeBoolean = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BOOLEAN;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Encode the boolean value\n  buffer[index++] = value ? 1 : 0;\n  return index;\n}\n\nvar serializeDate = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_DATE;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the date\n  var dateInMilis = Long.fromNumber(value.getTime());\n  var lowBits = dateInMilis.getLowBits();\n  var highBits = dateInMilis.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n}\n\nvar serializeRegExp = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (value.source && value.source.match(regexp) != null) {\n    throw Error(\"value \" + value.source + \" must not contain null bytes\");\n  }\n  // Adjust the index\n  index = index + buffer.write(value.source, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the parameters\n  if(value.global) buffer[index++] = 0x73; // s\n  if(value.ignoreCase) buffer[index++] = 0x69; // i\n  if(value.multiline) buffer[index++] = 0x6d; // m\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nvar serializeBSONRegExp = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Check the pattern for 0 bytes\n  if (value.pattern.match(regexp) != null) {\n    // The BSON spec doesn't allow keys with null bytes because keys are\n    // null-terminated.\n    throw Error(\"pattern \" + value.pattern + \" must not contain null bytes\");\n  }\n\n  // Adjust the index\n  index = index + buffer.write(value.pattern, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the options\n  index = index + buffer.write(value.options.split('').sort().join(''), index, 'utf8');\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nvar serializeMinMax = function(buffer, key, value, index, isArray) {\n  // Write the type of either min or max key\n  if(value === null) {\n    buffer[index++] = BSON.BSON_DATA_NULL;\n  } else if(value instanceof MinKey) {\n    buffer[index++] = BSON.BSON_DATA_MIN_KEY;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_MAX_KEY;\n  }\n\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\n\nvar serializeObjectId = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OID;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the objectId into the shared buffer\n  if(typeof value.id == 'string') {\n    buffer.write(value.id, index, 'binary')\n  } else if(value.id && value.id.copy){\n    value.id.copy(buffer, index, 0, 12);\n  } else {\n    throw new Error('object [' + JSON.stringify(value) + \"] is not a valid ObjectId\");\n  }\n\n  // Ajust index\n  return index + 12;\n}\n\nvar serializeBuffer = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Get size of the buffer (current write point)\n  var size = value.length;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the default subtype\n  buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT;\n  // Copy the content form the binary field to the buffer\n  value.copy(buffer, index, 0, size);\n  // Adjust the index\n  index = index + size;\n  return index;\n}\n\nvar serializeObject = function(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray, path) {\n  for(var i = 0; i < path.length; i++) {\n    if(path[i] === value) throw new Error('cyclic dependency detected');\n  }\n\n  // Push value to stack\n  path.push(value);\n  // Write the type\n  buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  var endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n  // Pop stack\n  path.pop();\n  // Write size\n  var size = endIndex - index;\n  return endIndex;\n}\n\nvar serializeDecimal128 = function(buffer, key, value, index, isArray) {\n  buffer[index++] = BSON.BSON_DATA_DECIMAL128;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the data from the value\n  value.bytes.copy(buffer, index, 0, 16);\n  return index + 16;\n}\n\nvar serializeLong = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = value._bsontype == 'Long' ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the date\n  var lowBits = value.getLowBits();\n  var highBits = value.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n}\n\nvar serializeInt32 = function(buffer, key, value, index, isArray) {\n  // Set int type 32 bits or less\n  buffer[index++] = BSON.BSON_DATA_INT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the int value\n  buffer[index++] = value & 0xff;\n  buffer[index++] = (value >> 8) & 0xff;\n  buffer[index++] = (value >> 16) & 0xff;\n  buffer[index++] = (value >> 24) & 0xff;\n  return index;\n}\n\nvar serializeDouble = function(buffer, key, value, index, isArray) {\n  // Encode as double\n  buffer[index++] = BSON.BSON_DATA_NUMBER;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write float\n  writeIEEE754(buffer, value, index, 'little', 52, 8);\n  // Ajust index\n  index = index + 8;\n  return index;\n}\n\nvar serializeFunction = function(buffer, key, value, index, checkKeys, depth, isArray) {\n  buffer[index++] = BSON.BSON_DATA_CODE;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Function string\n  var functionString = value.toString();\n  // Write the string\n  var size = buffer.write(functionString, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nvar serializeCode = function(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray) {\n  if(value.scope && typeof value.scope == 'object') {\n    // Write the type\n    buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n    // Number of written bytes\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n\n    // Starting index\n    var startIndex = index;\n\n    // Serialize the function\n    // Get the function string\n    var functionString = typeof value.code == 'string' ? value.code : value.code.toString();\n    // Index adjustment\n    index = index + 4;\n    // Write string into buffer\n    var codeSize = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = codeSize & 0xff;\n    buffer[index + 1] = (codeSize >> 8) & 0xff;\n    buffer[index + 2] = (codeSize >> 16) & 0xff;\n    buffer[index + 3] = (codeSize >> 24) & 0xff;\n    // Write end 0\n    buffer[index + 4 + codeSize - 1] = 0;\n    // Write the\n    index = index + codeSize + 4;\n\n    //\n    // Serialize the scope value\n    var endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined)\n    index = endIndex - 1;\n\n    // Writ the total\n    var totalSize = endIndex - startIndex;\n\n    // Write the total size of the object\n    buffer[startIndex++] = totalSize & 0xff;\n    buffer[startIndex++] = (totalSize >> 8) & 0xff;\n    buffer[startIndex++] = (totalSize >> 16) & 0xff;\n    buffer[startIndex++] = (totalSize >> 24) & 0xff;\n    // Write trailing zero\n    buffer[index++] = 0;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_CODE;\n    // Number of written bytes\n    var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Function string\n    var functionString = value.code.toString();\n    // Write the string\n    var size = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = (size >> 8) & 0xff;\n    buffer[index + 2] = (size >> 16) & 0xff;\n    buffer[index + 3] = (size >> 24) & 0xff;\n    // Update index\n    index = index + 4 + size - 1;\n    // Write zero\n    buffer[index++] = 0;\n  }\n\n  return index;\n}\n\nvar serializeBinary = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Extract the buffer\n  var data = value.value(true);\n  // Calculate size\n  var size = value.position;\n  // Add the deprecated 02 type 4 bytes of size to total\n  if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) size = size + 4;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the subtype to the buffer\n  buffer[index++] = value.sub_type;\n\n  // If we have binary type 2 the 4 first bytes are the size\n  if(value.sub_type == Binary.SUBTYPE_BYTE_ARRAY) {\n    size = size - 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = (size >> 8) & 0xff;\n    buffer[index++] = (size >> 16) & 0xff;\n    buffer[index++] = (size >> 24) & 0xff;\n  }\n\n  // Write the data to the object\n  data.copy(buffer, index, 0, value.position);\n  // Adjust the index\n  index = index + value.position;\n  return index;\n}\n\nvar serializeSymbol = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_SYMBOL;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the string\n  var size = buffer.write(value.value, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nvar serializeDBRef = function(buffer, key, value, index, depth, serializeFunctions, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OBJECT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray ? buffer.write(key, index, 'utf8') : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  var startIndex = index;\n  var endIndex;\n\n  // Serialize object\n  if(null != value.db) {\n    endIndex = serializeInto(buffer, {\n        '$ref': value.namespace\n      , '$id' : value.oid\n      , '$db' : value.db\n    }, false, index, depth + 1, serializeFunctions);\n  } else {\n    endIndex = serializeInto(buffer, {\n        '$ref': value.namespace\n      , '$id' : value.oid\n    }, false, index, depth + 1, serializeFunctions);\n  }\n\n  // Calculate object size\n  var size = endIndex - startIndex;\n  // Write the size\n  buffer[startIndex++] = size & 0xff;\n  buffer[startIndex++] = (size >> 8) & 0xff;\n  buffer[startIndex++] = (size >> 16) & 0xff;\n  buffer[startIndex++] = (size >> 24) & 0xff;\n  // Set index\n  return endIndex;\n}\n\nvar serializeInto = function serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {\n  startingIndex = startingIndex || 0;\n  path = path || [];\n\n  // Push the object to the path\n  path.push(object);\n\n  // Start place to serialize into\n  var index = startingIndex + 4;\n  var self = this;\n\n  // Special case isArray\n  if(Array.isArray(object)) {\n    // Get object keys\n    for(var i = 0; i < object.length; i++) {\n      var key = \"\" + i;\n      var value = object[i];\n\n      // Is there an override value\n      if(value && value.toBSON) {\n        if(typeof value.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n        value = value.toBSON();\n      }\n\n      var type = typeof value;\n      if(type == 'string') {\n        index = serializeString(buffer, key, value, index, true);\n      } else if(type == 'number') {\n        index = serializeNumber(buffer, key, value, index, true);\n      } else if(type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index, true);\n      } else if(value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index, true);\n      } else if(value === undefined) {\n        index = serializeNull(buffer, key, value, index, true);\n      } else if(value === null) {\n        index = serializeNull(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index, true);\n      } else if(Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index, true);\n      } else if(value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index, true);\n      } else if(type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true, path);\n      } else if(type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index, true);\n      } else if(typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions, true);\n      } else if(value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true);\n      } else if(value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);\n      } else if(value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index, true);\n      } else if(value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index, true);\n      }\n    }\n  } else if(object instanceof Map) {\n    var iterator = object.entries();\n    var done = false;\n\n    while(!done) {\n      // Unpack the next entry\n      var entry = iterator.next();\n      done = entry.done;\n      // Are we done, then skip and terminate\n      if(done) continue;\n\n      // Get the entry values\n      var key = entry.value[0];\n      var value = entry.value[1];\n\n      // Check the type of the value\n      var type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if(key != '$db' && key != '$ref' && key != '$id') {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error(\"key \" + key + \" must not contain null bytes\");\n        }\n\n        if (checkKeys) {\n          if('$' == key[0]) {\n            throw Error(\"key \" + key + \" must not start with '$'\");\n          } else if (!!~key.indexOf('.')) {\n            throw Error(\"key \" + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if(type == 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if(type == 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if(type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if(value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if(value === undefined && ignoreUndefined == true) {\n      } else if(value === null || value === undefined) {\n        index = serializeNull(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if(Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if(value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if(type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);\n      } else if(type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);\n      } else if(typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if(value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if(value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  } else {\n    // Did we provide a custom serialization method\n    if(object.toBSON) {\n      if(typeof object.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n      object = object.toBSON();\n      if(object != null && typeof object != 'object') throw new Error(\"toBSON function did not return an object\");\n    }\n\n    // Iterate over all the keys\n    for(var key in object) {\n      var value = object[key];\n      // Is there an override value\n      if(value && value.toBSON) {\n        if(typeof value.toBSON != 'function') throw new Error(\"toBSON is not a function\");\n        value = value.toBSON();\n      }\n\n      // Check the type of the value\n      var type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if(key != '$db' && key != '$ref' && key != '$id') {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error(\"key \" + key + \" must not contain null bytes\");\n        }\n\n        if (checkKeys) {\n          if('$' == key[0]) {\n            throw Error(\"key \" + key + \" must not start with '$'\");\n          } else if (!!~key.indexOf('.')) {\n            throw Error(\"key \" + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if(type == 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if(type == 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if(type == 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if(value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if(value === undefined && ignoreUndefined == true) {\n      } else if(value === null || value === undefined) {\n        index = serializeNull(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if(Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if(value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if(type == 'object' && value['_bsontype'] == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);\n      } else if(type == 'object' && value['_bsontype'] == 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Long' || value['_bsontype'] == 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);\n      } else if(typeof value == 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if(value['_bsontype'] == 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if(value['_bsontype'] == 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if(value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  }\n\n  // Remove the path\n  path.pop();\n\n  // Final padding byte for object\n  buffer[index++] = 0x00;\n\n  // Final size\n  var size = index - startingIndex;\n  // Write the size of the object\n  buffer[startingIndex++] = size & 0xff;\n  buffer[startingIndex++] = (size >> 8) & 0xff;\n  buffer[startingIndex++] = (size >> 16) & 0xff;\n  buffer[startingIndex++] = (size >> 24) & 0xff;\n  return index;\n}\n\nvar BSON = {};\n\n/**\n * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5\n *\n * @ignore\n * @api private\n */\nvar functionCache = BSON.functionCache = {};\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type, deprecated\n *\n * @classconstant BSON_DATA_UNDEFINED\n **/\nBSON.BSON_DATA_UNDEFINED = 6;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_DECIMAL128\n **/\nBSON.BSON_DATA_DECIMAL128 = 19;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = serializeInto;\n"},"hash":"ecadf5ad0600ce644fea6e5fd2a5be21"}