{"dependencies":[{"name":"./connection/logger","loc":{"line":3,"column":21}},{"name":"./connection/utils","loc":{"line":4,"column":27}},{"name":"./error","loc":{"line":5,"column":25}},{"name":"util","loc":{"line":6,"column":16}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n\"use strict\";\n\nvar Logger = require('./connection/logger')\n  , retrieveBSON = require('./connection/utils').retrieveBSON\n  , MongoError = require('./error')\n  , f = require('util').format;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\n/**\n * This is a cursor results callback\n *\n * @callback resultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {object} document\n */\n\n/**\n * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query.\n *\n * **CURSORS Cannot directly be instantiated**\n * @example\n * var Server = require('mongodb-core').Server\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Server({host: 'localhost', port: 27017});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   assert.equal(null, err);\n *\n *   // Execute the write\n *   var cursor = _server.cursor('integration_tests.inserts_example4', {\n *       find: 'integration_tests.example4'\n *     , query: {a:1}\n *   }, {\n *     readPreference: new ReadPreference('secondary');\n *   });\n *\n *   // Get the first document\n *   cursor.next(function(err, doc) {\n *     assert.equal(null, err);\n *     server.destroy();\n *   });\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\n/**\n * Creates a new Cursor, not to be used directly\n * @class\n * @param {object} bson An instance of the BSON parser\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|Long} cmd The selector (can be a command or a cursorId)\n * @param {object} [options=null] Optional settings.\n * @param {object} [options.batchSize=1000] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {object} [options.transforms=null] Transform methods for the cursor results\n * @param {function} [options.transforms.query] Transform the value returned from the initial query\n * @param {function} [options.transforms.doc] Transform each document returned from Cursor.prototype.next\n * @param {object} topology The server topology instance.\n * @param {object} topologyOptions The server topology options.\n * @return {Cursor} A cursor instance\n * @property {number} cursorBatchSize The current cursorBatchSize for the cursor\n * @property {number} cursorLimit The current cursorLimit for the cursor\n * @property {number} cursorSkip The current cursorSkip for the cursor\n */\nvar Cursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  options = options || {};\n\n  // Cursor pool\n  this.pool = null;\n  // Cursor server\n  this.server = null;\n\n  // Do we have a not connected handler\n  this.disconnectHandler = options.disconnectHandler;\n\n  // Set local values\n  this.bson = bson;\n  this.ns = ns;\n  this.cmd = cmd;\n  this.options = options;\n  this.topology = topology;\n\n  // All internal state\n  this.cursorState = {\n      cursorId: null\n    , cmd: cmd\n    , documents: options.documents || []\n    , cursorIndex: 0\n    , dead: false\n    , killed: false\n    , init: false\n    , notified: false\n    , limit: options.limit || cmd.limit || 0\n    , skip: options.skip || cmd.skip || 0\n    , batchSize: options.batchSize || cmd.batchSize || 1000\n    , currentLimit: 0\n    // Result field name if not a cursor (contains the array of results)\n    , transforms: options.transforms\n  }\n\n  // Add promoteLong to cursor state\n  if(typeof topologyOptions.promoteLongs == 'boolean') {\n    this.cursorState.promoteLongs = topologyOptions.promoteLongs;\n  } else if(typeof options.promoteLongs == 'boolean') {\n    this.cursorState.promoteLongs = options.promoteLongs;\n  }\n\n  // Add promoteValues to cursor state\n  if(typeof topologyOptions.promoteValues == 'boolean') {\n    this.cursorState.promoteValues = topologyOptions.promoteValues;\n  } else if(typeof options.promoteValues == 'boolean') {\n    this.cursorState.promoteValues = options.promoteValues;\n  }\n\n  // Add promoteBuffers to cursor state\n  if(typeof topologyOptions.promoteBuffers == 'boolean') {\n    this.cursorState.promoteBuffers = topologyOptions.promoteBuffers;\n  } else if(typeof options.promoteBuffers == 'boolean') {\n    this.cursorState.promoteBuffers = options.promoteBuffers;\n  }\n\n  // Logger\n  this.logger = Logger('Cursor', topologyOptions);\n\n  //\n  // Did we pass in a cursor id\n  if(typeof cmd == 'number') {\n    this.cursorState.cursorId = Long.fromNumber(cmd);\n    this.cursorState.lastCursorId = this.cursorState.cursorId;\n  } else if(cmd instanceof Long) {\n    this.cursorState.cursorId = cmd;\n    this.cursorState.lastCursorId = cmd;\n  }\n}\n\nCursor.prototype.setCursorBatchSize = function(value) {\n  this.cursorState.batchSize = value;\n}\n\nCursor.prototype.cursorBatchSize = function() {\n  return this.cursorState.batchSize;\n}\n\nCursor.prototype.setCursorLimit = function(value) {\n  this.cursorState.limit = value;\n}\n\nCursor.prototype.cursorLimit = function() {\n  return this.cursorState.limit;\n}\n\nCursor.prototype.setCursorSkip = function(value) {\n  this.cursorState.skip = value;\n}\n\nCursor.prototype.cursorSkip = function() {\n  return this.cursorState.skip;\n}\n\n//\n// Handle callback (including any exceptions thrown)\nvar handleCallback = function(callback, err, result) {\n  try {\n    callback(err, result);\n  } catch(err) {\n    process.nextTick(function() {\n      throw err;\n    });\n  }\n}\n\n// Internal methods\nCursor.prototype._find = function(callback) {\n  var self = this;\n\n  if(self.logger.isDebug()) {\n    self.logger.debug(f('issue initial query [%s] with flags [%s]'\n      , JSON.stringify(self.cmd)\n      , JSON.stringify(self.query)));\n  }\n\n  var queryCallback = function(err, r) {\n    if(err) return callback(err);\n\n    // Get the raw message\n    var result = r.message;\n\n    // Query failure bit set\n    if(result.queryFailure) {\n      return callback(MongoError.create(result.documents[0]), null);\n    }\n\n    // Check if we have a command cursor\n    if(Array.isArray(result.documents) && result.documents.length == 1\n      && (!self.cmd.find || (self.cmd.find && self.cmd.virtual == false))\n      && (result.documents[0].cursor != 'string'\n        || result.documents[0]['$err']\n        || result.documents[0]['errmsg']\n        || Array.isArray(result.documents[0].result))\n      ) {\n\n      // We have a an error document return the error\n      if(result.documents[0]['$err']\n        || result.documents[0]['errmsg']) {\n        return callback(MongoError.create(result.documents[0]), null);\n      }\n\n      // We have a cursor document\n      if(result.documents[0].cursor != null\n        && typeof result.documents[0].cursor != 'string') {\n          var id = result.documents[0].cursor.id;\n          // If we have a namespace change set the new namespace for getmores\n          if(result.documents[0].cursor.ns) {\n            self.ns = result.documents[0].cursor.ns;\n          }\n          // Promote id to long if needed\n          self.cursorState.cursorId = typeof id == 'number' ? Long.fromNumber(id) : id;\n          self.cursorState.lastCursorId = self.cursorState.cursorId;\n          // If we have a firstBatch set it\n          if(Array.isArray(result.documents[0].cursor.firstBatch)) {\n            self.cursorState.documents = result.documents[0].cursor.firstBatch;//.reverse();\n          }\n\n          // Return after processing command cursor\n          return callback(null, null);\n      }\n\n      if(Array.isArray(result.documents[0].result)) {\n        self.cursorState.documents = result.documents[0].result;\n        self.cursorState.cursorId = Long.ZERO;\n        return callback(null, null);\n      }\n    }\n\n    // Otherwise fall back to regular find path\n    self.cursorState.cursorId = result.cursorId;\n    self.cursorState.documents = result.documents;\n    self.cursorState.lastCursorId = result.cursorId;\n\n    // Transform the results with passed in transformation method if provided\n    if(self.cursorState.transforms && typeof self.cursorState.transforms.query == 'function') {\n      self.cursorState.documents = self.cursorState.transforms.query(result);\n    }\n\n    // Return callback\n    callback(null, null);\n  }\n\n  // Options passed to the pool\n  var queryOptions = {};\n\n  // If we have a raw query decorate the function\n  if(self.options.raw || self.cmd.raw) {\n    // queryCallback.raw = self.options.raw || self.cmd.raw;\n    queryOptions.raw = self.options.raw || self.cmd.raw;\n  }\n\n  // Do we have documentsReturnedIn set on the query\n  if(typeof self.query.documentsReturnedIn == 'string') {\n    // queryCallback.documentsReturnedIn = self.query.documentsReturnedIn;\n    queryOptions.documentsReturnedIn = self.query.documentsReturnedIn;\n  }\n\n  // Add promote Long value if defined\n  if(typeof self.cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = self.cursorState.promoteLongs;\n  }\n\n  // Add promote values if defined\n  if(typeof self.cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = self.cursorState.promoteValues;\n  }\n\n  // Add promote values if defined\n  if(typeof self.cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = self.cursorState.promoteBuffers;\n  }\n  // Write the initial command out\n  self.server.s.pool.write(self.query, queryOptions, queryCallback);\n}\n\nCursor.prototype._getmore = function(callback) {\n  if(this.logger.isDebug()) this.logger.debug(f('schedule getMore call for query [%s]', JSON.stringify(this.query)))\n  // Determine if it's a raw query\n  var raw = this.options.raw || this.cmd.raw;\n\n  // Set the current batchSize\n  var batchSize = this.cursorState.batchSize;\n  if(this.cursorState.limit > 0\n    && ((this.cursorState.currentLimit + batchSize) > this.cursorState.limit)) {\n    batchSize = this.cursorState.limit - this.cursorState.currentLimit;\n  }\n\n  // Default pool\n  var pool = this.server.s.pool;\n\n  // We have a wire protocol handler\n  this.server.wireProtocolHandler.getMore(this.bson, this.ns, this.cursorState, batchSize, raw, pool, this.options, callback);\n}\n\nCursor.prototype._killcursor = function(callback) {\n  // Set cursor to dead\n  this.cursorState.dead = true;\n  this.cursorState.killed = true;\n  // Remove documents\n  this.cursorState.documents = [];\n\n  // If no cursor id just return\n  if(this.cursorState.cursorId == null || this.cursorState.cursorId.isZero() || this.cursorState.init == false) {\n    if(callback) callback(null, null);\n    return;\n  }\n\n  // Default pool\n  var pool = this.server.s.pool;\n  // Execute command\n  this.server.wireProtocolHandler.killCursor(this.bson, this.ns, this.cursorState.cursorId, pool, callback);\n}\n\n/**\n * Clone the cursor\n * @method\n * @return {Cursor}\n */\nCursor.prototype.clone = function() {\n  return this.topology.cursor(this.ns, this.cmd, this.options);\n}\n\n/**\n * Checks if the cursor is dead\n * @method\n * @return {boolean} A boolean signifying if the cursor is dead or not\n */\nCursor.prototype.isDead = function() {\n  return this.cursorState.dead == true;\n}\n\n/**\n * Checks if the cursor was killed by the application\n * @method\n * @return {boolean} A boolean signifying if the cursor was killed by the application\n */\nCursor.prototype.isKilled = function() {\n  return this.cursorState.killed == true;\n}\n\n/**\n * Checks if the cursor notified it's caller about it's death\n * @method\n * @return {boolean} A boolean signifying if the cursor notified the callback\n */\nCursor.prototype.isNotified = function() {\n  return this.cursorState.notified == true;\n}\n\n/**\n * Returns current buffered documents length\n * @method\n * @return {number} The number of items in the buffered documents\n */\nCursor.prototype.bufferedCount = function() {\n  return this.cursorState.documents.length - this.cursorState.cursorIndex;\n}\n\n/**\n * Returns current buffered documents\n * @method\n * @return {Array} An array of buffered documents\n */\nCursor.prototype.readBufferedDocuments = function(number) {\n  var unreadDocumentsLength = this.cursorState.documents.length - this.cursorState.cursorIndex;\n  var length = number < unreadDocumentsLength ? number : unreadDocumentsLength;\n  var elements = this.cursorState.documents.slice(this.cursorState.cursorIndex, this.cursorState.cursorIndex + length);\n\n  // Transform the doc with passed in transformation method if provided\n  if(this.cursorState.transforms && typeof this.cursorState.transforms.doc == 'function') {\n    // Transform all the elements\n    for(var i = 0; i < elements.length; i++) {\n      elements[i] = this.cursorState.transforms.doc(elements[i]);\n    }\n  }\n\n  // Ensure we do not return any more documents than the limit imposed\n  // Just return the number of elements up to the limit\n  if(this.cursorState.limit > 0 && (this.cursorState.currentLimit + elements.length) > this.cursorState.limit) {\n    elements = elements.slice(0, (this.cursorState.limit - this.cursorState.currentLimit));\n    this.kill();\n  }\n\n  // Adjust current limit\n  this.cursorState.currentLimit = this.cursorState.currentLimit + elements.length;\n  this.cursorState.cursorIndex = this.cursorState.cursorIndex + elements.length;\n\n  // Return elements\n  return elements;\n}\n\n/**\n * Kill the cursor\n * @method\n * @param {resultCallback} callback A callback function\n */\nCursor.prototype.kill = function(callback) {\n  this._killcursor(callback);\n}\n\n/**\n * Resets the cursor\n * @method\n * @return {null}\n */\nCursor.prototype.rewind = function() {\n  if(this.cursorState.init) {\n    if(!this.cursorState.dead) {\n      this.kill();\n    }\n\n    this.cursorState.currentLimit = 0;\n    this.cursorState.init = false;\n    this.cursorState.dead = false;\n    this.cursorState.killed = false;\n    this.cursorState.notified = false;\n    this.cursorState.documents = [];\n    this.cursorState.cursorId = null;\n    this.cursorState.cursorIndex = 0;\n  }\n}\n\n/**\n * Validate if the pool is dead and return error\n */\nvar isConnectionDead = function(self, callback) {\n  if(self.pool\n    && self.pool.isDestroyed()) {\n    self.cursorState.notified = true;\n    self.cursorState.killed = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    callback(MongoError.create(f('connection to host %s:%s was destroyed', self.pool.host, self.pool.port)))\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor is dead but was not explicitly killed by user\n */\nvar isCursorDeadButNotkilled = function(self, callback) {\n  // Cursor is dead but not marked killed, return null\n  if(self.cursorState.dead && !self.cursorState.killed) {\n    self.cursorState.notified = true;\n    self.cursorState.killed = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    handleCallback(callback, null, null);\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor is dead and was killed by user\n */\nvar isCursorDeadAndKilled = function(self, callback) {\n  if(self.cursorState.dead && self.cursorState.killed) {\n    handleCallback(callback, MongoError.create('cursor is dead'));\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Validate if the cursor was killed by the user\n */\nvar isCursorKilled = function(self, callback) {\n  if(self.cursorState.killed) {\n    self.cursorState.notified = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    handleCallback(callback, null, null);\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Mark cursor as being dead and notified\n */\nvar setCursorDeadAndNotified = function(self, callback) {\n  self.cursorState.dead = true;\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n  handleCallback(callback, null, null);\n}\n\n/**\n * Mark cursor as being notified\n */\nvar setCursorNotified = function(self, callback) {\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n  handleCallback(callback, null, null);\n}\n\nvar nextFunction = function(self, callback) {\n  // We have notified about it\n  if(self.cursorState.notified) {\n    return callback(new Error('cursor is exhausted'));\n  }\n\n  // Cursor is killed return null\n  if(isCursorKilled(self, callback)) return;\n\n  // Cursor is dead but not marked killed, return null\n  if(isCursorDeadButNotkilled(self, callback)) return;\n\n  // We have a dead and killed cursor, attempting to call next should error\n  if(isCursorDeadAndKilled(self, callback)) return;\n\n  // We have just started the cursor\n  if(!self.cursorState.init) {\n    // Topology is not connected, save the call in the provided store to be\n    // Executed at some point when the handler deems it's reconnected\n    if(!self.topology.isConnected(self.options)) {\n      // Only need this for single server, because repl sets and mongos\n      // will always continue trying to reconnect\n      if (self.topology._type === 'server' && !self.topology.s.options.reconnect) {\n        // Reconnect is disabled, so we'll never reconnect\n        return callback(new MongoError('no connection available'));\n      }\n      if (self.disconnectHandler != null) {\n        if (self.topology.isDestroyed()) {\n          // Topology was destroyed, so don't try to wait for it to reconnect\n          return callback(new MongoError('Topology was destroyed'));\n        }\n\n        return self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);\n      }\n    }\n\n    try {\n      self.server = self.topology.getServer(self.options);\n    } catch(err) {\n      // Handle the error and add object to next method call\n      if(self.disconnectHandler != null) {\n        return self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);\n      }\n\n      // Otherwise return the error\n      return callback(err);\n    }\n\n    // Set as init\n    self.cursorState.init = true;\n\n    // Server does not support server\n    if(self.cmd\n      && self.cmd.collation\n      && self.server.ismaster.maxWireVersion < 5) {\n      return callback(new MongoError(f('server %s does not support collation', self.server.name)));\n    }\n\n    try {\n      self.query = self.server.wireProtocolHandler.command(self.bson, self.ns, self.cmd, self.cursorState, self.topology, self.options);\n    } catch(err) {\n      return callback(err);\n    }\n  }\n\n  // If we don't have a cursorId execute the first query\n  if(self.cursorState.cursorId == null) {\n    // Check if pool is dead and return if not possible to\n    // execute the query against the db\n    if(isConnectionDead(self, callback)) return;\n\n    // Check if topology is destroyed\n    if(self.topology.isDestroyed()) return callback(new MongoError('connection destroyed, not possible to instantiate cursor'));\n\n    // query, cmd, options, cursorState, callback\n    self._find(function(err) {\n      if(err) return handleCallback(callback, err, null);\n\n      if(self.cursorState.documents.length == 0\n        && self.cursorState.cursorId && self.cursorState.cursorId.isZero()\n        && !self.cmd.tailable && !self.cmd.awaitData) {\n        return setCursorNotified(self, callback);\n      }\n\n      nextFunction(self, callback);\n    });\n  } else if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n    // Ensure we kill the cursor on the server\n    self.kill();\n    // Set cursor in dead and notified state\n    return setCursorDeadAndNotified(self, callback);\n  } else if(self.cursorState.cursorIndex == self.cursorState.documents.length\n      && !Long.ZERO.equals(self.cursorState.cursorId)) {\n      // Ensure an empty cursor state\n      self.cursorState.documents = [];\n      self.cursorState.cursorIndex = 0;\n\n      // Check if topology is destroyed\n      if(self.topology.isDestroyed()) return callback(new MongoError('connection destroyed, not possible to instantiate cursor'));\n\n      // Check if connection is dead and return if not possible to\n      // execute a getmore on this connection\n      if(isConnectionDead(self, callback)) return;\n\n      // Execute the next get more\n      self._getmore(function(err, doc, connection) {\n        if(err) return handleCallback(callback, err);\n\n        // Save the returned connection to ensure all getMore's fire over the same connection\n        self.connection = connection;\n\n        // Tailable cursor getMore result, notify owner about it\n        // No attempt is made here to retry, this is left to the user of the\n        // core module to handle to keep core simple\n        if(self.cursorState.documents.length == 0\n          && self.cmd.tailable && Long.ZERO.equals(self.cursorState.cursorId)) {\n          // No more documents in the tailed cursor\n          return handleCallback(callback, MongoError.create({\n              message: 'No more documents in tailed cursor'\n            , tailable: self.cmd.tailable\n            , awaitData: self.cmd.awaitData\n          }));\n        } else if(self.cursorState.documents.length == 0\n          && self.cmd.tailable && !Long.ZERO.equals(self.cursorState.cursorId)) {\n          return nextFunction(self, callback);\n        }\n\n        if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n          return setCursorDeadAndNotified(self, callback);\n        }\n\n        nextFunction(self, callback);\n      });\n  } else if(self.cursorState.documents.length == self.cursorState.cursorIndex\n    && self.cmd.tailable && Long.ZERO.equals(self.cursorState.cursorId)) {\n      return handleCallback(callback, MongoError.create({\n          message: 'No more documents in tailed cursor'\n        , tailable: self.cmd.tailable\n        , awaitData: self.cmd.awaitData\n      }));\n  } else if(self.cursorState.documents.length == self.cursorState.cursorIndex\n      && Long.ZERO.equals(self.cursorState.cursorId)) {\n      setCursorDeadAndNotified(self, callback);\n  } else {\n    if(self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n      // Ensure we kill the cursor on the server\n      self.kill();\n      // Set cursor in dead and notified state\n      return setCursorDeadAndNotified(self, callback);\n    }\n\n    // Increment the current cursor limit\n    self.cursorState.currentLimit += 1;\n\n    // Get the document\n    var doc = self.cursorState.documents[self.cursorState.cursorIndex++];\n\n    // Doc overflow\n    if(!doc || doc.$err) {\n      // Ensure we kill the cursor on the server\n      self.kill();\n      // Set cursor in dead and notified state\n      return setCursorDeadAndNotified(self, function() {\n        handleCallback(callback, new MongoError(doc ? doc.$err : undefined));\n      });\n    }\n\n    // Transform the doc with passed in transformation method if provided\n    if(self.cursorState.transforms && typeof self.cursorState.transforms.doc == 'function') {\n      doc = self.cursorState.transforms.doc(doc);\n    }\n\n    // Return the document\n    handleCallback(callback, null, doc);\n  }\n}\n\n/**\n * Retrieve the next document from the cursor\n * @method\n * @param {resultCallback} callback A callback function\n */\nCursor.prototype.next = function(callback) {\n  nextFunction(this, callback);\n}\n\nmodule.exports = Cursor;\n"},"hash":"5bc9e12150b89cd1fb822a019203cd64"}