{"dependencies":[{"name":"./messages","loc":{"line":40,"column":33}},{"name":"./notFound","loc":{"line":54,"column":46}},{"name":"./cast","loc":{"line":60,"column":34}},{"name":"./validation","loc":{"line":61,"column":40}},{"name":"./validator","loc":{"line":62,"column":39}},{"name":"./version","loc":{"line":63,"column":37}},{"name":"./overwriteModel","loc":{"line":64,"column":44}},{"name":"./missingSchema","loc":{"line":65,"column":43}},{"name":"./divergentArray","loc":{"line":66,"column":44}}],"generated":{"js":"\n/**\n * MongooseError constructor\n *\n * @param {String} msg Error message\n * @inherits Error https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\n */\n\nfunction MongooseError(msg) {\n  Error.call(this);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.message = msg;\n  this.name = 'MongooseError';\n}\n\n/*!\n * Inherits from Error.\n */\n\nMongooseError.prototype = Object.create(Error.prototype);\nMongooseError.prototype.constructor = Error;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseError;\n\n/**\n * The default built-in validator error messages.\n *\n * @see Error.messages #error_messages_MongooseError-messages\n * @api public\n */\n\nMongooseError.messages = require('./messages');\n\n// backward compat\nMongooseError.Messages = MongooseError.messages;\n\n/**\n * This error will be called when `save()` fails because the underlying\n * document was not found. The constructor takes one parameter, the\n * conditions that mongoose passed to `update()` when trying to update\n * the document.\n *\n * @api public\n */\n\nMongooseError.DocumentNotFoundError = require('./notFound');\n\n/*!\n * Expose subclasses\n */\n\nMongooseError.CastError = require('./cast');\nMongooseError.ValidationError = require('./validation');\nMongooseError.ValidatorError = require('./validator');\nMongooseError.VersionError = require('./version');\nMongooseError.OverwriteModelError = require('./overwriteModel');\nMongooseError.MissingSchemaError = require('./missingSchema');\nMongooseError.DivergentArrayError = require('./divergentArray');\n"},"hash":"1100a1e4aa69a78b9dcd75ad0d43f807"}