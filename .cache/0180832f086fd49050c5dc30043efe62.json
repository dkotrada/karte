{"dependencies":[{"name":"../../utils","loc":{"line":4,"column":20}},{"name":"../../document","loc":{"line":65,"column":33}}],"generated":{"js":"'use strict';\n\nvar Document;\nvar utils = require('../../utils');\n\n/*!\n * exports\n */\n\nexports.compile = compile;\nexports.defineKey = defineKey;\n\n/*!\n * Compiles schemas.\n */\n\nfunction compile(tree, proto, prefix, options) {\n  Document = Document || require('../../document');\n  var keys = Object.keys(tree);\n  var i = keys.length;\n  var len = keys.length;\n  var limb;\n  var key;\n\n  if (options.retainKeyOrder) {\n    for (i = 0; i < len; ++i) {\n      key = keys[i];\n      limb = tree[key];\n\n      defineKey(key,\n          ((utils.getFunctionName(limb.constructor) === 'Object'\n          && Object.keys(limb).length)\n          && (!limb[options.typeKey] || (options.typeKey === 'type' && limb.type.type))\n              ? limb\n              : null)\n          , proto\n          , prefix\n          , keys\n          , options);\n    }\n  } else {\n    while (i--) {\n      key = keys[i];\n      limb = tree[key];\n\n      defineKey(key,\n          ((utils.getFunctionName(limb.constructor) === 'Object'\n          && Object.keys(limb).length)\n          && (!limb[options.typeKey] || (options.typeKey === 'type' && limb.type.type))\n              ? limb\n              : null)\n          , proto\n          , prefix\n          , keys\n          , options);\n    }\n  }\n}\n\n/*!\n * Defines the accessor named prop on the incoming prototype.\n */\n\nfunction defineKey(prop, subprops, prototype, prefix, keys, options) {\n  Document = Document || require('../../document');\n  var path = (prefix ? prefix + '.' : '') + prop;\n  prefix = prefix || '';\n\n  if (subprops) {\n    Object.defineProperty(prototype, prop, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        var _this = this;\n        if (!this.$__.getters) {\n          this.$__.getters = {};\n        }\n\n        if (!this.$__.getters[path]) {\n          var nested = Object.create(Document.prototype, getOwnPropertyDescriptors(this));\n\n          // save scope for nested getters/setters\n          if (!prefix) {\n            nested.$__.scope = this;\n          }\n          nested.$__.nestedPath = path;\n\n          Object.defineProperty(nested, 'schema', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: prototype.schema\n          });\n\n          Object.defineProperty(nested, 'toObject', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return utils.clone(_this.get(path), { retainKeyOrder: true });\n            }\n          });\n\n          Object.defineProperty(nested, 'toJSON', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return _this.get(path);\n            }\n          });\n\n          Object.defineProperty(nested, '$__isNested', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: true\n          });\n\n          compile(subprops, nested, path, options);\n          this.$__.getters[path] = nested;\n        }\n\n        return this.$__.getters[path];\n      },\n      set: function(v) {\n        if (v instanceof Document) {\n          v = v.toObject({ transform: false });\n        }\n        var doc = this.$__.scope || this;\n        return doc.$set(path, v);\n      }\n    });\n  } else {\n    Object.defineProperty(prototype, prop, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        return this.get.call(this.$__.scope || this, path);\n      },\n      set: function(v) {\n        return this.$set.call(this.$__.scope || this, path, v);\n      }\n    });\n  }\n}\n\n// gets descriptors for all properties of `object`\n// makes all properties non-enumerable to match previous behavior to #2211\nfunction getOwnPropertyDescriptors(object) {\n  var result = {};\n\n  Object.getOwnPropertyNames(object).forEach(function(key) {\n    result[key] = Object.getOwnPropertyDescriptor(object, key);\n    // Assume these are schema paths, ignore them re: #5470\n    if (result[key].get) {\n      delete result[key];\n      return;\n    }\n    result[key].enumerable = ['isNew', '$__', 'errors', '_doc'].indexOf(key) === -1;\n  });\n\n  return result;\n}\n"},"hash":"8094e1b9ef9413d7c54c369212a771cb"}