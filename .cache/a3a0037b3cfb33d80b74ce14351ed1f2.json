{"dependencies":[{"name":"./utils","loc":{"line":2,"column":29}},{"name":"mongodb-core","loc":{"line":3,"column":25}},{"name":"util","loc":{"line":4,"column":16}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\nvar shallowClone = require('./utils').shallowClone\n  , handleCallback = require('./utils').handleCallback\n  , MongoError = require('mongodb-core').MongoError\n  , f = require('util').format;\n\nvar authenticate = function(self, username, password, options, callback) {\n  // Did the user destroy the topology\n  if(self.serverConfig && self.serverConfig.isDestroyed()) return callback(new MongoError('topology was destroyed'));\n\n  // the default db to authenticate against is 'self'\n  // if authenticate is called from a retry context, it may be another one, like admin\n  var authdb = options.dbName ? options.dbName : self.databaseName;\n  authdb = self.authSource ? self.authSource : authdb;\n  authdb = options.authdb ? options.authdb : authdb;\n  authdb = options.authSource ? options.authSource : authdb;\n\n  // Callback\n  var _callback = function(err, result) {\n    if(self.listeners('authenticated').length > 0) {\n      self.emit('authenticated', err, result);\n    }\n\n    // Return to caller\n    handleCallback(callback, err, result);\n  }\n\n  // authMechanism\n  var authMechanism = options.authMechanism || '';\n  authMechanism = authMechanism.toUpperCase();\n\n  // If classic auth delegate to auth command\n  if(authMechanism == 'MONGODB-CR') {\n    self.s.topology.auth('mongocr', authdb, username, password, function(err) {\n      if(err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else if(authMechanism == 'PLAIN') {\n    self.s.topology.auth('plain', authdb, username, password, function(err) {\n      if(err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else if(authMechanism == 'MONGODB-X509') {\n    self.s.topology.auth('x509', authdb, username, password, function(err) {\n      if(err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else if(authMechanism == 'SCRAM-SHA-1') {\n    self.s.topology.auth('scram-sha-1', authdb, username, password, function(err) {\n      if(err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else if(authMechanism == 'GSSAPI') {\n    if(process.platform == 'win32') {\n      self.s.topology.auth('sspi', authdb, username, password, options, function(err) {\n        if(err) return handleCallback(callback, err, false);\n        _callback(null, true);\n      });\n    } else {\n      self.s.topology.auth('gssapi', authdb, username, password, options, function(err) {\n        if(err) return handleCallback(callback, err, false);\n        _callback(null, true);\n      });\n    }\n  } else if(authMechanism == 'DEFAULT') {\n    self.s.topology.auth('default', authdb, username, password, function(err) {\n      if(err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else {\n    handleCallback(callback, MongoError.create({message: f(\"authentication mechanism %s not supported\", options.authMechanism), driver:true}));\n  }\n}\n\nmodule.exports = function(self, username, password, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  // Shallow copy the options\n  options = shallowClone(options);\n\n  // Set default mechanism\n  if(!options.authMechanism) {\n    options.authMechanism = 'DEFAULT';\n  } else if(options.authMechanism != 'GSSAPI'\n    && options.authMechanism != 'DEFAULT'\n    && options.authMechanism != 'MONGODB-CR'\n    && options.authMechanism != 'MONGODB-X509'\n    && options.authMechanism != 'SCRAM-SHA-1'\n    && options.authMechanism != 'PLAIN') {\n      return handleCallback(callback, MongoError.create({message: \"only DEFAULT, GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism\", driver:true}));\n  }\n\n  // If we have a callback fallback\n  if(typeof callback == 'function') return authenticate(self, username, password, options, function(err, r) {\n    // Support failed auth method\n    if(err && err.message && err.message.indexOf('saslStart') != -1) err.code = 59;\n    // Reject error\n    if(err) return callback(err, r);\n    callback(null, r);\n  });\n\n  // Return a promise\n  return new self.s.promiseLibrary(function(resolve, reject) {\n    authenticate(self, username, password, options, function(err, r) {\n      // Support failed auth method\n      if(err && err.message && err.message.indexOf('saslStart') != -1) err.code = 59;\n      // Reject error\n      if(err) return reject(err);\n      resolve(r);\n    });\n  });\n};\n"},"hash":"fff08e8d8766fe3bc196efacef6c88be"}