{"dependencies":[{"name":"util","loc":{"line":3,"column":16}},{"name":"require_optional","loc":{"line":4,"column":29}},{"name":"bson","loc":{"line":67,"column":21}}],"generated":{"js":"\"use strict\";\n\nvar f = require('util').format,\n  require_optional = require('require_optional');\n\n// Set property function\nvar setProperty = function(obj, prop, flag, values) {\n  Object.defineProperty(obj, prop.name, {\n      enumerable:true,\n      set: function(value) {\n        if(typeof value != 'boolean') throw new Error(f(\"%s required a boolean\", prop.name));\n        // Flip the bit to 1\n        if(value == true) values.flags |= flag;\n        // Flip the bit to 0 if it's set, otherwise ignore\n        if(value == false && (values.flags & flag) == flag) values.flags ^= flag;\n        prop.value = value;\n      }\n    , get: function() { return prop.value; }\n  });\n}\n\n// Set property function\nvar getProperty = function(obj, propName, fieldName, values, func) {\n  Object.defineProperty(obj, propName, {\n    enumerable:true,\n    get: function() {\n      // Not parsed yet, parse it\n      if(values[fieldName] == null && obj.isParsed && !obj.isParsed()) {\n        obj.parse();\n      }\n\n      // Do we have a post processing function\n      if(typeof func == 'function') return func(values[fieldName]);\n      // Return raw value\n      return values[fieldName];\n    }\n  });\n}\n\n// Set simple property\nvar getSingleProperty = function(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    enumerable:true,\n    get: function() {\n      return value\n    }\n  });\n}\n\n// Shallow copy\nvar copy = function(fObj, tObj) {\n  tObj = tObj || {};\n  for(var name in fObj) tObj[name] = fObj[name];\n  return tObj;\n}\n\nvar debugOptions = function(debugFields, options) {\n  var finaloptions = {};\n  debugFields.forEach(function(n) {\n    finaloptions[n] = options[n];\n  });\n\n  return finaloptions;\n}\n\nvar retrieveBSON = function() {\n  var BSON = require('bson');\n  BSON.native = false;\n\n  try {\n    var optionalBSON = require_optional('bson-ext');\n    if(optionalBSON) {\n      optionalBSON.native = true;\n      return optionalBSON;\n    }\n  } catch(err) {}\n\n  return BSON;\n}\n\nexports.setProperty = setProperty;\nexports.getProperty = getProperty;\nexports.getSingleProperty = getSingleProperty;\nexports.copy = copy;\nexports.debugOptions = debugOptions;\nexports.retrieveBSON = retrieveBSON;\n"},"hash":"93b41013eaf167f6ded5c060c5dfd713"}