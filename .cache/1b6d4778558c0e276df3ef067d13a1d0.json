{"dependencies":[{"name":"./","loc":{"line":5,"column":28}},{"name":"../utils","loc":{"line":6,"column":20}}],"generated":{"js":"/*!\n * Module requirements\n */\n\nvar MongooseError = require('./');\nvar utils = require('../utils');\n\n/**\n * Document Validation Error\n *\n * @api private\n * @param {Document} instance\n * @inherits MongooseError\n */\n\nfunction ValidationError(instance) {\n  this.errors = {};\n  this._message = '';\n  if (instance && instance.constructor.name === 'model') {\n    this._message = instance.constructor.modelName + ' validation failed';\n    MongooseError.call(this, this._message);\n  } else {\n    this._message = 'Validation failed';\n    MongooseError.call(this, this._message);\n  }\n  this.name = 'ValidationError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  if (instance) {\n    instance.errors = this.errors;\n  }\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nValidationError.prototype = Object.create(MongooseError.prototype);\nValidationError.prototype.constructor = MongooseError;\n\n/**\n * Console.log helper\n */\n\nValidationError.prototype.toString = function() {\n  return this.name + ': ' + _generateMessage(this);\n};\n\n/*!\n * inspect helper\n */\n\nValidationError.prototype.inspect = function() {\n  return utils.assign(new Error(this.message), this);\n};\n\n/*!\n * Helper for JSON.stringify\n */\n\nValidationError.prototype.toJSON = function() {\n  return utils.assign({}, this, { message: this.message });\n};\n\n/*!\n * add message\n */\n\nValidationError.prototype.addError = function(path, error) {\n  this.errors[path] = error;\n  this.message = this._message + ': ' + _generateMessage(this);\n};\n\n/*!\n * ignore\n */\n\nfunction _generateMessage(err) {\n  var keys = Object.keys(err.errors || {});\n  var len = keys.length;\n  var msgs = [];\n  var key;\n\n  for (var i = 0; i < len; ++i) {\n    key = keys[i];\n    if (err === err.errors[key]) {\n      continue;\n    }\n    msgs.push(key + ': ' + err.errors[key].message);\n  }\n\n  return msgs.join(', ');\n}\n\n/*!\n * Module exports\n */\n\nmodule.exports = exports = ValidationError;\n"},"hash":"b746b259c5709626d39597f13fe57b13"}