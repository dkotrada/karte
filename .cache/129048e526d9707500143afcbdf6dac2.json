{"dependencies":[{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nfunction Kareem() {\n  this._pres = {};\n  this._posts = {};\n}\n\nKareem.prototype.execPre = function(name, context, args, callback) {\n  if (arguments.length === 3) {\n    callback = args;\n    args = [];\n  }\n  var pres = this._pres[name] || [];\n  var numPres = pres.length;\n  var numAsyncPres = pres.numAsync || 0;\n  var currentPre = 0;\n  var asyncPresLeft = numAsyncPres;\n  var done = false;\n  var $args = args;\n\n  if (!numPres) {\n    return process.nextTick(function() {\n      callback(null);\n    });\n  }\n\n  var next = function() {\n    if (currentPre >= numPres) {\n      return;\n    }\n    var pre = pres[currentPre];\n\n    if (pre.isAsync) {\n      pre.fn.call(\n        context,\n        function(error) {\n          if (error) {\n            if (done) {\n              return;\n            }\n            done = true;\n            return callback(error);\n          }\n\n          ++currentPre;\n          next.apply(context, arguments);\n        },\n        function(error) {\n          if (error) {\n            if (done) {\n              return;\n            }\n            done = true;\n            return callback(error);\n          }\n\n          if (--numAsyncPres === 0) {\n            return callback(null);\n          }\n        });\n    } else if (pre.fn.length > 0) {\n      var args = [function(error) {\n        if (error) {\n          if (done) {\n            return;\n          }\n          done = true;\n          return callback(error);\n        }\n\n        if (++currentPre >= numPres) {\n          if (asyncPresLeft > 0) {\n            // Leave parallel hooks to run\n            return;\n          } else {\n            return callback(null);\n          }\n        }\n\n        next.apply(context, arguments);\n      }];\n      var _args = arguments.length >= 2 ? arguments : [null].concat($args);\n      for (var i = 1; i < _args.length; ++i) {\n        args.push(_args[i]);\n      }\n      pre.fn.apply(context, args);\n    } else {\n      pre.fn.call(context);\n      if (++currentPre >= numPres) {\n        if (asyncPresLeft > 0) {\n          // Leave parallel hooks to run\n          return;\n        } else {\n          return process.nextTick(function() {\n            callback(null);\n          });\n        }\n      }\n      next();\n    }\n  };\n\n  next.apply(null, [null].concat(args));\n};\n\nKareem.prototype.execPreSync = function(name, context) {\n  var pres = this._pres[name] || [];\n  var numPres = pres.length;\n\n  for (var i = 0; i < numPres; ++i) {\n    pres[i].fn.call(context);\n  }\n};\n\nKareem.prototype.execPost = function(name, context, args, options, callback) {\n  if (arguments.length < 5) {\n    callback = options;\n    options = null;\n  }\n  var posts = this._posts[name] || [];\n  var numPosts = posts.length;\n  var currentPost = 0;\n\n  var firstError = null;\n  if (options && options.error) {\n    firstError = options.error;\n  }\n\n  if (!numPosts) {\n    return process.nextTick(function() {\n      callback.apply(null, [firstError].concat(args));\n    });\n  }\n\n  var next = function() {\n    var post = posts[currentPost];\n    var numArgs = 0;\n    var argLength = args.length;\n    var newArgs = [];\n    for (var i = 0; i < argLength; ++i) {\n      numArgs += args[i] && args[i]._kareemIgnore ? 0 : 1;\n      if (!args[i] || !args[i]._kareemIgnore) {\n        newArgs.push(args[i]);\n      }\n    }\n\n    if (firstError) {\n      if (post.length === numArgs + 2) {\n        post.apply(context, [firstError].concat(newArgs).concat(function(error) {\n          if (error) {\n            firstError = error;\n          }\n          if (++currentPost >= numPosts) {\n            return callback.call(null, firstError);\n          }\n          next();\n        }));\n      } else {\n        if (++currentPost >= numPosts) {\n          return callback.call(null, firstError);\n        }\n        next();\n      }\n    } else {\n      if (post.length === numArgs + 2) {\n        // Skip error handlers if no error\n        if (++currentPost >= numPosts) {\n          return callback.apply(null, [null].concat(args));\n        }\n        return next();\n      }\n      if (post.length === numArgs + 1) {\n        post.apply(context, newArgs.concat(function(error) {\n          if (error) {\n            firstError = error;\n            return next();\n          }\n\n          if (++currentPost >= numPosts) {\n            return callback.apply(null, [null].concat(args));\n          }\n\n          next();\n        }));\n      } else {\n        post.apply(context, newArgs);\n\n        if (++currentPost >= numPosts) {\n          return callback.apply(null, [null].concat(args));\n        }\n\n        next();\n      }\n    }\n  };\n\n  next();\n};\n\nKareem.prototype.execPostSync = function(name, context) {\n  var posts = this._posts[name] || [];\n  var numPosts = posts.length;\n\n  for (var i = 0; i < numPosts; ++i) {\n    posts[i].call(context);\n  }\n};\n\nfunction _handleWrapError(instance, error, name, context, args, options, callback) {\n  if (options.useErrorHandlers) {\n    var _options = { error: error };\n    return instance.execPost(name, context, args, _options, function(error) {\n      return typeof callback === 'function' && callback(error);\n    });\n  } else {\n    return typeof callback === 'function' ?\n      callback(error) :\n      undefined;\n  }\n}\n\nKareem.prototype.wrap = function(name, fn, context, args, options) {\n  var lastArg = (args.length > 0 ? args[args.length - 1] : null);\n  var argsWithoutCb = typeof lastArg === 'function' ?\n    args.slice(0, args.length - 1) :\n    args;\n  var _this = this;\n\n  var useLegacyPost;\n  if (typeof options === 'object') {\n    useLegacyPost = options && options.useLegacyPost;\n  } else {\n    useLegacyPost = options;\n  }\n  options = options || {};\n\n  this.execPre(name, context, args, function(error) {\n    if (error) {\n      var numCallbackParams = options.numCallbackParams || 0;\n      var nulls = [];\n      for (var i = 0; i < numCallbackParams; ++i) {\n        nulls.push(null);\n      }\n      return _handleWrapError(_this, error, name, context, nulls,\n        options, lastArg);\n    }\n\n    var end = (typeof lastArg === 'function' ? args.length - 1 : args.length);\n\n    fn.apply(context, args.slice(0, end).concat(function() {\n      var args = arguments;\n      var argsWithoutError = Array.prototype.slice.call(arguments, 1);\n      if (options.nullResultByDefault && argsWithoutError.length === 0) {\n        argsWithoutError.push(null);\n      }\n      if (arguments[0]) {\n        // Assume error\n        return _handleWrapError(_this, arguments[0], name, context,\n          argsWithoutError, options, lastArg);\n      } else {\n        if (useLegacyPost && typeof lastArg === 'function') {\n          lastArg.apply(context, arguments);\n        }\n\n        _this.execPost(name, context, argsWithoutError, function() {\n          if (arguments[0]) {\n            return typeof lastArg === 'function' ?\n              lastArg(arguments[0]) :\n              undefined;\n          }\n\n          return typeof lastArg === 'function' && !useLegacyPost ?\n            lastArg.apply(context, arguments) :\n            undefined;\n        });\n      }\n    }));\n  });\n};\n\nKareem.prototype.createWrapper = function(name, fn, context, options) {\n  var _this = this;\n  return function() {\n    var args = Array.prototype.slice.call(arguments);\n    _this.wrap(name, fn, context, args, options);\n  };\n};\n\nKareem.prototype.pre = function(name, isAsync, fn, error) {\n  if (typeof arguments[1] !== 'boolean') {\n    error = fn;\n    fn = isAsync;\n    isAsync = false;\n  }\n\n  this._pres[name] = this._pres[name] || [];\n  var pres = this._pres[name];\n\n  if (isAsync) {\n    pres.numAsync = pres.numAsync || 0;\n    ++pres.numAsync;\n  }\n\n  pres.push({ fn: fn, isAsync: isAsync });\n\n  return this;\n};\n\nKareem.prototype.post = function(name, fn) {\n  (this._posts[name] = this._posts[name] || []).push(fn);\n  return this;\n};\n\nKareem.prototype.clone = function() {\n  var n = new Kareem();\n  for (var key in this._pres) {\n    if (!this._pres.hasOwnProperty(key)) {\n      continue;\n    }\n    n._pres[key] = this._pres[key].slice();\n    n._pres[key].numAsync = this._pres[key].numAsync;\n  }\n  for (var key in this._posts) {\n    if (!this._posts.hasOwnProperty(key)) {\n      continue;\n    }\n    n._posts[key] = this._posts[key].slice();\n  }\n\n  return n;\n};\n\nKareem.prototype.merge = function(other) {\n  var ret = this.clone();\n  for (var key in other._pres) {\n    if (!other._pres.hasOwnProperty(key)) {\n      continue;\n    }\n    ret._pres[key] = (ret._pres[key] || []).concat(other._pres[key].slice());\n    ret._pres[key].numAsync += other._pres[key].numAsync;\n  }\n  for (var key in other._posts) {\n    if (!other._posts.hasOwnProperty(key)) {\n      continue;\n    }\n    ret._posts[key] = (ret._posts[key] || []).concat(other._posts[key].slice());\n  }\n\n  return ret;\n};\n\nmodule.exports = Kareem;\n"},"hash":"f505d41768e07a39e56520811d27567b"}