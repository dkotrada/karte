{"dependencies":[{"name":"util","loc":{"line":3,"column":16}},{"name":"crypto","loc":{"line":4,"column":21}},{"name":"../connection/utils","loc":{"line":5,"column":27}},{"name":"../connection/commands","loc":{"line":6,"column":20}},{"name":"../error","loc":{"line":7,"column":25}},{"name":"buffer"},{"name":"process"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar process = require(\"process\");\n\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar BSON = retrieveBSON(),\n  Binary = BSON.Binary;\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\nvar id = 0;\n\n/**\n * Creates a new ScramSHA1 authentication mechanism\n * @class\n * @return {ScramSHA1} A cursor instance\n */\nvar ScramSHA1 = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n  this.id = id++;\n}\n\nvar parsePayload = function(payload) {\n  var dict = {};\n  var parts = payload.split(',');\n\n  for(var i = 0; i < parts.length; i++) {\n    var valueParts = parts[i].split('=');\n    dict[valueParts[0]] = valueParts[1];\n  }\n\n  return dict;\n}\n\nvar passwordDigest = function(username, password) {\n  if(typeof username != 'string') throw new MongoError(\"username must be a string\");\n  if(typeof password != 'string') throw new MongoError(\"password must be a string\");\n  if(password.length == 0) throw new MongoError(\"password cannot be empty\");\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + \":mongo:\" + password, 'utf8');\n  return md5.digest('hex');\n}\n\n// XOR two buffers\nvar xor = function(a, b) {\n  if (!Buffer.isBuffer(a)) a = new Buffer(a)\n  if (!Buffer.isBuffer(b)) b = new Buffer(b)\n  var res = []\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  } else {\n    for (i = 0; i < a.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  }\n  return new Buffer(res);\n}\n\nvar _hiCache = {};\nvar _hiCacheCount = 0;\nvar _hiCachePurge = function() {\n  _hiCache = {};\n  _hiCacheCount = 0;\n};\n\nvar hi = function(data, salt, iterations) {\n  // omit the work if already generated\n  var key = [data, salt.toString('base64'), iterations].join('_');\n  if (_hiCache[key] !== undefined) {\n    return _hiCache[key];\n  }\n\n  // generate the salt\n  var saltedData = crypto.pbkdf2Sync(data, salt, iterations, 20, \"sha1\");\n\n  // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n  if (_hiCacheCount >= 200) {\n    _hiCachePurge();\n  }\n\n  _hiCache[key] = saltedData;\n  _hiCacheCount += 1;\n  return saltedData;\n};\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // Execute MongoCR\n  var executeScram = function(connection) {\n    // Clean up the user\n    username = username.replace('=', \"=3D\").replace(',', '=2C');\n\n    // Create a random nonce\n    var nonce = crypto.randomBytes(24).toString('base64');\n    // var nonce = 'MsQUY9iw0T9fx2MUEz6LZPwGuhVvWAhc'\n    var firstBare = f(\"n=%s,r=%s\", username, nonce);\n\n    // Build command structure\n    var cmd = {\n        saslStart: 1\n      , mechanism: 'SCRAM-SHA-1'\n      , payload: new Binary(f(\"n,,%s\", firstBare))\n      , autoAuthorize: 1\n    }\n\n    // Handle the error\n    var handleError = function(err, r) {\n      if(err) {\n        numberOfValidConnections = numberOfValidConnections - 1;\n        errorObject = err; return false;\n      } else if(r.result['$err']) {\n        errorObject = r.result; return false;\n      } else if(r.result['errmsg']) {\n        errorObject = r.result; return false;\n      } else {\n        numberOfValidConnections = numberOfValidConnections + 1;\n      }\n\n      return true\n    }\n\n    // Finish up\n    var finish = function(_count, _numberOfValidConnections) {\n      if(_count == 0 && _numberOfValidConnections > 0) {\n        // Store the auth details\n        addAuthSession(self.authStore, new AuthSession(db, username, password));\n        // Return correct authentication\n        return callback(null, true);\n      } else if(_count == 0) {\n        if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using scram\"));\n        return callback(errorObject, false);\n      }\n    }\n\n    var handleEnd = function(_err, _r) {\n      // Handle any error\n      handleError(_err, _r)\n      // Adjust the number of connections\n      count = count - 1;\n      // Execute the finish\n      finish(count, numberOfValidConnections);\n    }\n\n    // Write the commmand on the connection\n    server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n      numberToSkip: 0, numberToReturn: 1\n    }), function(err, r) {\n      // Do we have an error, handle it\n      if(handleError(err, r) == false) {\n        count = count - 1;\n\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password));\n          // Return correct authentication\n          return callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using scram\"));\n          return callback(errorObject, false);\n        }\n\n        return;\n      }\n\n      // Get the dictionary\n      var dict = parsePayload(r.result.payload.value())\n\n      // Unpack dictionary\n      var iterations = parseInt(dict.i, 10);\n      var salt = dict.s;\n      var rnonce = dict.r;\n\n      // Set up start of proof\n      var withoutProof = f(\"c=biws,r=%s\", rnonce);\n      var passwordDig = passwordDigest(username, password);\n      var saltedPassword = hi(passwordDig\n          , new Buffer(salt, 'base64')\n          , iterations);\n\n      // Create the client key\n      var hmac = crypto.createHmac('sha1', saltedPassword);\n      hmac.update(new Buffer(\"Client Key\"));\n      var clientKey = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Create the stored key\n      var hash = crypto.createHash('sha1');\n      hash.update(clientKey);\n      var storedKey = new Buffer(hash.digest('base64'), 'base64');\n\n      // Create the authentication message\n      var authMsg = [firstBare, r.result.payload.value().toString('base64'), withoutProof].join(',');\n\n      // Create client signature\n      hmac = crypto.createHmac('sha1', storedKey);\n      hmac.update(new Buffer(authMsg));\n      var clientSig = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Create client proof\n      var clientProof = f(\"p=%s\", new Buffer(xor(clientKey, clientSig)).toString('base64'));\n\n      // Create client final\n      var clientFinal = [withoutProof, clientProof].join(',');\n\n      //\n      // Create continue message\n      var cmd = {\n          saslContinue: 1\n        , conversationId: r.result.conversationId\n        , payload: new Binary(new Buffer(clientFinal))\n      }\n\n      //\n      // Execute sasl continue\n      // Write the commmand on the connection\n      server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n        numberToSkip: 0, numberToReturn: 1\n      }), function(err, r) {\n        if(r && r.result.done == false) {\n          var cmd = {\n              saslContinue: 1\n            , conversationId: r.result.conversationId\n            , payload: new Buffer(0)\n          }\n\n          // Write the commmand on the connection\n          server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n            numberToSkip: 0, numberToReturn: 1\n          }), function(err, r) {\n            handleEnd(err, r);\n          });\n        } else {\n          handleEnd(err, r);\n        }\n      });\n    });\n  }\n\n  var _execute = function(_connection) {\n    process.nextTick(function() {\n      executeScram(_connection);\n    });\n  }\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    _execute(connections.shift());\n  }\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nScramSHA1.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  // No connections\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n\nmodule.exports = ScramSHA1;\n"},"hash":"e6b7edb8daafc3deae73b0f8b1944046"}