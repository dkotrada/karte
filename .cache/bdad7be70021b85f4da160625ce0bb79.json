{"dependencies":[{"name":"../error","loc":{"line":3,"column":25}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\"use strict\";\n\nvar MongoError = require('../error');\n\n// Wire command operation ids\nvar OP_UPDATE = 2001;\nvar OP_INSERT = 2002;\nvar OP_DELETE = 2006;\n\nvar Insert = function(requestId, ismaster, bson, ns, documents, options) {\n  // Basic options needed to be passed in\n  if(ns == null) throw new MongoError(\"ns must be specified for query\");\n  if(!Array.isArray(documents) || documents.length == 0) throw new MongoError(\"documents array must contain at least one document to insert\");\n\n  // Validate that we are not passing 0x00 in the collection name\n  if(!!~ns.indexOf(\"\\x00\")) {\n    throw new MongoError(\"namespace cannot contain a null character\");\n  }\n\n  // Set internal\n  this.requestId = requestId;\n  this.bson = bson;\n  this.ns = ns;\n  this.documents = documents;\n  this.ismaster = ismaster;\n\n  // Ensure empty options\n  options = options || {};\n\n  // Unpack options\n  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : true;\n  this.continueOnError = typeof options.continueOnError == 'boolean' ? options.continueOnError : false;\n  // Set flags\n  this.flags = this.continueOnError ? 1 : 0;\n}\n\n// To Binary\nInsert.prototype.toBin = function() {\n  // Contains all the buffers to be written\n  var buffers = [];\n\n  // Header buffer\n  var header = new Buffer(\n    4 * 4 // Header\n    + 4   // Flags\n    + Buffer.byteLength(this.ns) + 1 // namespace\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Total length of the message\n  var totalLength = header.length;\n\n  // Serialize all the documents\n  for(var i = 0; i < this.documents.length; i++) {\n    var buffer = this.bson.serialize(this.documents[i], {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined,\n    });\n\n    // Document is larger than maxBsonObjectSize, terminate serialization\n    if(buffer.length > this.ismaster.maxBsonObjectSize) {\n      throw new MongoError(\"Document exceeds maximum allowed bson size of \" + this.ismaster.maxBsonObjectSize + \" bytes\");\n    }\n\n    // Add to total length of wire protocol message\n    totalLength = totalLength + buffer.length;\n    // Add to buffer\n    buffers.push(buffer);\n  }\n\n  // Command is larger than maxMessageSizeBytes terminate serialization\n  if(totalLength > this.ismaster.maxMessageSizeBytes) {\n    throw new MongoError(\"Command exceeds maximum message size of \" + this.ismaster.maxMessageSizeBytes + \" bytes\");\n  }\n\n  // Add all the metadata\n  var index = 0;\n\n  // Write header length\n  header[index + 3] = (totalLength >> 24) & 0xff;\n  header[index + 2] = (totalLength >> 16) & 0xff;\n  header[index + 1] = (totalLength >> 8) & 0xff;\n  header[index] = (totalLength) & 0xff;\n  index = index + 4;\n\n  // Write header requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // No flags\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Operation\n  header[index + 3] = (OP_INSERT >> 24) & 0xff;\n  header[index + 2] = (OP_INSERT >> 16) & 0xff;\n  header[index + 1] = (OP_INSERT >> 8) & 0xff;\n  header[index] = (OP_INSERT) & 0xff;\n  index = index + 4;\n\n  // Flags\n  header[index + 3] = (this.flags >> 24) & 0xff;\n  header[index + 2] = (this.flags >> 16) & 0xff;\n  header[index + 1] = (this.flags >> 8) & 0xff;\n  header[index] = (this.flags) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Return the buffers\n  return buffers;\n}\n\nvar Update = function(requestId, ismaster, bson, ns, update, options) {\n  // Basic options needed to be passed in\n  if(ns == null) throw new MongoError(\"ns must be specified for query\");\n\n  // Ensure empty options\n  options = options || {};\n\n  // Set internal\n  this.requestId = requestId;\n  this.bson = bson;\n  this.ns = ns;\n  this.ismaster = ismaster;\n\n  // Unpack options\n  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;\n\n  // Unpack the update document\n  this.upsert = typeof update[0].upsert == 'boolean' ? update[0].upsert : false;\n  this.multi = typeof update[0].multi == 'boolean' ? update[0].multi : false;\n  this.q = update[0].q;\n  this.u = update[0].u;\n\n  // Create flag value\n  this.flags = this.upsert ? 1 : 0;\n  this.flags = this.multi ? this.flags | 2 : this.flags;\n}\n\n// To Binary\nUpdate.prototype.toBin = function() {\n  // Contains all the buffers to be written\n  var buffers = [];\n\n  // Header buffer\n  var header = new Buffer(\n    4 * 4 // Header\n    + 4   // ZERO\n    + Buffer.byteLength(this.ns) + 1 // namespace\n    + 4   // Flags\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Total length of the message\n  var totalLength = header.length;\n\n  // Serialize the selector\n  var selector = this.bson.serialize(this.q, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined,\n  });\n  buffers.push(selector);\n  totalLength = totalLength + selector.length;\n\n  // Serialize the update\n  var update = this.bson.serialize(this.u, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined,\n  });\n  buffers.push(update);\n  totalLength = totalLength + update.length;\n\n  // Index in header buffer\n  var index = 0;\n\n  // Write header length\n  header[index + 3] = (totalLength >> 24) & 0xff;\n  header[index + 2] = (totalLength >> 16) & 0xff;\n  header[index + 1] = (totalLength >> 8) & 0xff;\n  header[index] = (totalLength) & 0xff;\n  index = index + 4;\n\n  // Write header requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // No flags\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Operation\n  header[index + 3] = (OP_UPDATE >> 24) & 0xff;\n  header[index + 2] = (OP_UPDATE >> 16) & 0xff;\n  header[index + 1] = (OP_UPDATE >> 8) & 0xff;\n  header[index] = (OP_UPDATE) & 0xff;\n  index = index + 4;\n\n  // Write ZERO\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Flags\n  header[index + 3] = (this.flags >> 24) & 0xff;\n  header[index + 2] = (this.flags >> 16) & 0xff;\n  header[index + 1] = (this.flags >> 8) & 0xff;\n  header[index] = (this.flags) & 0xff;\n  index = index + 4;\n\n  // Return the buffers\n  return buffers;\n}\n\nvar Remove = function(requestId, ismaster, bson, ns, remove, options) {\n  // Basic options needed to be passed in\n  if(ns == null) throw new MongoError(\"ns must be specified for query\");\n\n  // Ensure empty options\n  options = options || {};\n\n  // Set internal\n  this.requestId = requestId;\n  this.bson = bson;\n  this.ns = ns;\n  this.ismaster = ismaster;\n\n  // Unpack options\n  this.serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n  this.checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;\n\n  // Unpack the update document\n  this.limit = typeof remove[0].limit == 'number' ? remove[0].limit : 1;\n  this.q = remove[0].q;\n\n  // Create flag value\n  this.flags = this.limit == 1 ? 1 : 0;\n}\n\n// To Binary\nRemove.prototype.toBin = function() {\n  // Contains all the buffers to be written\n  var buffers = [];\n\n  // Header buffer\n  var header = new Buffer(\n    4 * 4 // Header\n    + 4   // ZERO\n    + Buffer.byteLength(this.ns) + 1 // namespace\n    + 4   // Flags\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Total length of the message\n  var totalLength = header.length;\n\n  // Serialize the selector\n  var selector = this.bson.serialize(this.q, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined,\n  });\n  buffers.push(selector);\n  totalLength = totalLength + selector.length;\n\n  // Index in header buffer\n  var index = 0;\n\n  // Write header length\n  header[index + 3] = (totalLength >> 24) & 0xff;\n  header[index + 2] = (totalLength >> 16) & 0xff;\n  header[index + 1] = (totalLength >> 8) & 0xff;\n  header[index] = (totalLength) & 0xff;\n  index = index + 4;\n\n  // Write header requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = (this.requestId) & 0xff;\n  index = index + 4;\n\n  // No flags\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Operation\n  header[index + 3] = (OP_DELETE >> 24) & 0xff;\n  header[index + 2] = (OP_DELETE >> 16) & 0xff;\n  header[index + 1] = (OP_DELETE >> 8) & 0xff;\n  header[index] = (OP_DELETE) & 0xff;\n  index = index + 4;\n\n  // Write ZERO\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = (0) & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Write ZERO\n  header[index + 3] = (this.flags >> 24) & 0xff;\n  header[index + 2] = (this.flags >> 16) & 0xff;\n  header[index + 1] = (this.flags >> 8) & 0xff;\n  header[index] = (this.flags) & 0xff;\n  index = index + 4;\n\n  // Return the buffers\n  return buffers;\n}\n\nmodule.exports = {\n    Insert: Insert\n  , Update: Update\n  , Remove: Remove\n}\n"},"hash":"b1e2d1a6df34217fdd152f4c78e42877"}