{"dependencies":[{"name":"safe-buffer","loc":{"line":15,"column":21}},{"name":"debug","loc":{"line":16,"column":20}},{"name":"cookies","loc":{"line":17,"column":22}},{"name":"on-headers","loc":{"line":18,"column":24}}],"generated":{"js":"\n/*!\n * cookie-session\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Buffer = require('safe-buffer').Buffer\nvar debug = require('debug')('cookie-session')\nvar Cookies = require('cookies')\nvar onHeaders = require('on-headers')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = cookieSession\n\n/**\n * Create a new cookie session middleware.\n *\n * @param {object} [options]\n * @param {boolean} [options.httpOnly=true]\n * @param {array} [options.keys]\n * @param {string} [options.name=session] Name of the cookie to use\n * @param {boolean} [options.overwrite=true]\n * @param {string} [options.secret]\n * @param {boolean} [options.signed=true]\n * @return {function} middleware\n * @public\n */\n\nfunction cookieSession (options) {\n  var opts = options || {}\n\n  // cookie name\n  var name = opts.name || 'session'\n\n  // secrets\n  var keys = opts.keys\n  if (!keys && opts.secret) keys = [opts.secret]\n\n  // defaults\n  if (opts.overwrite == null) opts.overwrite = true\n  if (opts.httpOnly == null) opts.httpOnly = true\n  if (opts.signed == null) opts.signed = true\n\n  if (!keys && opts.signed) throw new Error('.keys required.')\n\n  debug('session options %j', opts)\n\n  return function _cookieSession (req, res, next) {\n    var cookies = new Cookies(req, res, {\n      keys: keys\n    })\n    var sess\n\n    // to pass to Session()\n    req.sessionCookies = cookies\n    req.sessionOptions = Object.create(opts)\n    req.sessionKey = name\n\n    // define req.session getter / setter\n    Object.defineProperty(req, 'session', {\n      configurable: true,\n      enumerable: true,\n      get: getSession,\n      set: setSession\n    })\n\n    function getSession () {\n      // already retrieved\n      if (sess) {\n        return sess\n      }\n\n      // unset\n      if (sess === false) {\n        return null\n      }\n\n      // get or create session\n      return (sess = tryGetSession(req) || createSession(req))\n    }\n\n    function setSession (val) {\n      if (val == null) {\n        // unset session\n        sess = false\n        return val\n      }\n\n      if (typeof val === 'object') {\n        // create a new session\n        sess = Session.create(this, val)\n        return sess\n      }\n\n      throw new Error('req.session can only be set as null or an object.')\n    }\n\n    onHeaders(res, function setHeaders () {\n      if (sess === undefined) {\n        // not accessed\n        return\n      }\n\n      try {\n        if (sess === false) {\n          // remove\n          cookies.set(name, '', req.sessionOptions)\n        } else if ((!sess.isNew || sess.isPopulated) && sess.isChanged) {\n          // save populated or non-new changed session\n          sess.save()\n        }\n      } catch (e) {\n        debug('error saving session %s', e.message)\n      }\n    })\n\n    next()\n  }\n};\n\n/**\n * Session model.\n *\n * @param {Context} ctx\n * @param {Object} obj\n * @private\n */\n\nfunction Session (ctx, obj) {\n  Object.defineProperty(this, '_ctx', {\n    value: ctx\n  })\n\n  if (obj) {\n    for (var key in obj) {\n      this[key] = obj[key]\n    }\n  }\n}\n\n/**\n * Create new session.\n * @private\n */\n\nSession.create = function create (req, obj) {\n  var ctx = new SessionContext(req)\n  return new Session(ctx, obj)\n}\n\n/**\n * Create session from serialized form.\n * @private\n */\n\nSession.deserialize = function deserialize (req, str) {\n  var ctx = new SessionContext(req)\n  var obj = decode(str)\n\n  ctx._new = false\n  ctx._val = str\n\n  return new Session(ctx, obj)\n}\n\n/**\n * Serialize a session to a string.\n * @private\n */\n\nSession.serialize = function serialize (sess) {\n  return encode(sess)\n}\n\n/**\n * Return if the session is changed for this request.\n *\n * @return {Boolean}\n * @public\n */\n\nObject.defineProperty(Session.prototype, 'isChanged', {\n  get: function getIsChanged () {\n    return this._ctx._new || this._ctx._val !== Session.serialize(this)\n  }\n})\n\n/**\n * Return if the session is new for this request.\n *\n * @return {Boolean}\n * @public\n */\n\nObject.defineProperty(Session.prototype, 'isNew', {\n  get: function getIsNew () {\n    return this._ctx._new\n  }\n})\n\n/**\n * Return how many values there are in the session object.\n * Used to see if it's \"populated\".\n *\n * @return {Number}\n * @public\n */\n\nObject.defineProperty(Session.prototype, 'length', {\n  get: function getLength () {\n    return Object.keys(this).length\n  }\n})\n\n/**\n * populated flag, which is just a boolean alias of .length.\n *\n * @return {Boolean}\n * @public\n */\n\nObject.defineProperty(Session.prototype, 'isPopulated', {\n  get: function getIsPopulated () {\n    return Boolean(this.length)\n  }\n})\n\n/**\n * Save session changes by performing a Set-Cookie.\n * @private\n */\n\nSession.prototype.save = function save () {\n  var ctx = this._ctx\n  var val = Session.serialize(this)\n\n  var cookies = ctx.req.sessionCookies\n  var name = ctx.req.sessionKey\n  var opts = ctx.req.sessionOptions\n\n  debug('save %s', val)\n  cookies.set(name, val, opts)\n}\n\n/**\n * Session context to tie session to req.\n *\n * @param {Request} req\n * @private\n */\n\nfunction SessionContext (req) {\n  this.req = req\n\n  this._new = true\n  this._val = undefined\n}\n\n/**\n * Create a new session.\n * @private\n */\n\nfunction createSession (req) {\n  debug('new session')\n  return Session.create(req)\n}\n\n/**\n * Decode the base64 cookie value to an object.\n *\n * @param {String} string\n * @return {Object}\n * @private\n */\n\nfunction decode (string) {\n  var body = Buffer.from(string, 'base64').toString('utf8')\n  return JSON.parse(body)\n}\n\n/**\n * Encode an object into a base64-encoded JSON string.\n *\n * @param {Object} body\n * @return {String}\n * @private\n */\n\nfunction encode (body) {\n  var str = JSON.stringify(body)\n  return Buffer.from(str).toString('base64')\n}\n\n/**\n * Try getting a session from a request.\n * @private\n */\n\nfunction tryGetSession (req) {\n  var cookies = req.sessionCookies\n  var name = req.sessionKey\n  var opts = req.sessionOptions\n\n  var str = cookies.get(name, opts)\n\n  if (!str) {\n    return undefined\n  }\n\n  debug('parse %s', str)\n\n  try {\n    return Session.deserialize(req, str)\n  } catch (err) {\n    return undefined\n  }\n}\n"},"hash":"afef04d729679eba65193223b089b78e"}