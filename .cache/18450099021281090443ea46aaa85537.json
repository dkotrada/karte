{"dependencies":[{"name":"../document","loc":{"line":1,"column":23}},{"name":"../promise_provider","loc":{"line":2,"column":30}}],"generated":{"js":"var Document = require('../document');\nvar PromiseProvider = require('../promise_provider');\n\nmodule.exports = Subdocument;\n\n/**\n * Subdocument constructor.\n *\n * @inherits Document\n * @api private\n */\n\nfunction Subdocument(value, fields, parent, skipId, options) {\n  this.$isSingleNested = true;\n  Document.call(this, value, fields, skipId, options);\n}\n\nSubdocument.prototype = Object.create(Document.prototype);\n\nSubdocument.prototype.toBSON = function() {\n  return this.toObject({\n    transform: false,\n    virtuals: false,\n    _skipDepopulateTopLevel: true,\n    depopulate: true,\n    flattenDecimals: false\n  });\n};\n\n/**\n * Used as a stub for [hooks.js](https://github.com/bnoguchi/hooks-js/tree/31ec571cef0332e21121ee7157e0cf9728572cc3)\n *\n * ####NOTE:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @return {Promise} resolved Promise\n * @api private\n */\n\nSubdocument.prototype.save = function(fn) {\n  var Promise = PromiseProvider.get();\n  return new Promise.ES6(function(resolve) {\n    fn && fn();\n    resolve();\n  });\n};\n\nSubdocument.prototype.$isValid = function(path) {\n  if (this.$parent && this.$basePath) {\n    return this.$parent.$isValid([this.$basePath, path].join('.'));\n  }\n  return Document.prototype.$isValid.call(this, path);\n};\n\nSubdocument.prototype.markModified = function(path) {\n  Document.prototype.markModified.call(this, path);\n  if (this.$parent && this.$basePath) {\n    if (this.$parent.isDirectModified(this.$basePath)) {\n      return;\n    }\n    this.$parent.markModified([this.$basePath, path].join('.'), this);\n  }\n};\n\nSubdocument.prototype.$markValid = function(path) {\n  Document.prototype.$markValid.call(this, path);\n  if (this.$parent && this.$basePath) {\n    this.$parent.$markValid([this.$basePath, path].join('.'));\n  }\n};\n\nSubdocument.prototype.invalidate = function(path, err, val) {\n  // Hack: array subdocuments' validationError is equal to the owner doc's,\n  // so validating an array subdoc gives the top-level doc back. Temporary\n  // workaround for #5208 so we don't have circular errors.\n  if (err !== this.ownerDocument().$__.validationError) {\n    Document.prototype.invalidate.call(this, path, err, val);\n  }\n\n  if (this.$parent && this.$basePath) {\n    this.$parent.invalidate([this.$basePath, path].join('.'), err, val);\n  } else if (err.kind === 'cast' || err.name === 'CastError') {\n    throw err;\n  }\n};\n\n/**\n * Returns the top level document of this sub-document.\n *\n * @return {Document}\n */\n\nSubdocument.prototype.ownerDocument = function() {\n  if (this.$__.ownerDocument) {\n    return this.$__.ownerDocument;\n  }\n\n  var parent = this.$parent;\n  if (!parent) {\n    return this;\n  }\n\n  while (parent.$parent || parent.__parent) {\n    parent = parent.$parent || parent.__parent;\n  }\n  this.$__.ownerDocument = parent;\n  return this.$__.ownerDocument;\n};\n\n/**\n * Returns this sub-documents parent document.\n *\n * @api public\n */\n\nSubdocument.prototype.parent = function() {\n  return this.$parent;\n};\n\n/**\n * Null-out this subdoc\n *\n * @param {Object} [options]\n * @param {Function} [callback] optional callback for compatibility with Document.prototype.remove\n */\n\nSubdocument.prototype.remove = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  registerRemoveListener(this);\n\n  // If removing entire doc, no need to remove subdoc\n  if (!options || !options.noop) {\n    this.$parent.set(this.$basePath, null);\n  }\n\n  if (typeof callback === 'function') {\n    callback(null);\n  }\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.populate = function() {\n  throw new Error('Mongoose does not support calling populate() on nested ' +\n    'docs. Instead of `doc.nested.populate(\"path\")`, use ' +\n    '`doc.populate(\"nested.path\")`');\n};\n\n/*!\n * Registers remove event listeners for triggering\n * on subdocuments.\n *\n * @param {EmbeddedDocument} sub\n * @api private\n */\n\nfunction registerRemoveListener(sub) {\n  var owner = sub.ownerDocument();\n\n  function emitRemove() {\n    owner.removeListener('save', emitRemove);\n    owner.removeListener('remove', emitRemove);\n    sub.emit('remove', sub);\n    sub.constructor.emit('remove', sub);\n    owner = sub = null;\n  }\n\n  owner.on('save', emitRemove);\n  owner.on('remove', emitRemove);\n}\n"},"hash":"38bef5f10dc26e4eb8dd66bc44a76268"}